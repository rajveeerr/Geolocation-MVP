This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    web-ci.yml
web/
  src/
    components/
      common/
        Button.tsx
        ContentCarousel.tsx
        DealCardSkeleton.tsx
        Logo.tsx
        Pagination.tsx
        SectionDivider.tsx
      deals/
        DealCardV2.tsx
        DealResultCard.tsx
        DealResultsList.tsx
        DealResultsMap.tsx
        DealsSidebar.tsx
        PremiumDealCard.tsx
      landing/
        BentoCard.tsx
        CarouselCard.tsx
        CompactDealCard.tsx
        CtaCard.tsx
        DashboardPreview.tsx
        DealCard.tsx
        DealColumn.tsx
        DealFinder.tsx
        DealItem.tsx
        DealList.tsx
        DealMap.tsx
        DiscoverSection.tsx
        DynamicHeadline.tsx
        FeatureCard.tsx
        FeaturesSection.tsx
        HappyHourCard.tsx
        HeroBackground.tsx
        HeroCallToAction.tsx
        HeroIllustration.tsx
        HeroSection.tsx
        HomepageContentGrid.tsx
        LiveMapCard.tsx
        SearchHeader.tsx
      layout/
        ConditionalLayout.tsx
        Footer.tsx
        Header.tsx
        MerchantDashboardLayout.tsx
        MerchantHeader.tsx
        MerchantLayout.tsx
        NavbarSearch.tsx
        ProfileDropDown.tsx
        SearchModal.tsx
        SimpleFooter.tsx
      merchant/
        create-deal/
          DealBasicsStep.tsx
          DealInstructionsStep.tsx
          DealOfferStep.tsx
          DealReviewStep.tsx
          DealScheduleStep.tsx
          index.ts
        onboarding/
          BusinessInfoStep.tsx
          OnboardingStepLayout.tsx
        MerchantDealCard.tsx
      ui/
        avatar.tsx
        button-variants.ts
        button.tsx
        dropdown-menu.tsx
        form-context.ts
        form.tsx
        input.tsx
        label.tsx
        LoadingOverlay.tsx
        LoadingSpinner.tsx
        separator.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        use-form-field.ts
    config/
      design-system.json
    context/
      auth-context-definition.ts
      AuthContext.tsx
      DealCreationContext.tsx
      MerchantOnboardingContext.tsx
      useAuth.ts
    data/
      deals-new.ts
      deals.ts
    hooks/
      use-toast.ts
      useCountdown.ts
      useMerchantStatus.ts
    lib/
      utils.ts
      validationSchemas.ts
    pages/
      merchant/
        DealCreatePage.tsx
        MerchantCalendarPage.tsx
        MerchantDashboardPage.tsx
        MerchantMessagesPage.tsx
        MerchantMyDealsPage.tsx
        MerchantOnboardingPage.tsx
        MerchantTodayPage.tsx
      AboutPage.tsx
      AllDealsPage.tsx
      ForBusinessesPage.tsx
      HomePage.tsx
      LoginPage.tsx
      NotFoundPage.tsx
      PrivacyPage.tsx
      ProfilePage.tsx
      SignUpPage.tsx
      TermsPage.tsx
    routing/
      paths.ts
      ProtectedRoute.tsx
    services/
      api.ts
    styles/
      global.css
    App.tsx
    index.css
    main.tsx
    vite-env.d.ts
  .gitignore
  .prettierrc.cjs
  babel.config.js
  components.json
  eslint.config.js
  index.html
  jest.config.js
  jest.setup.ts
  package.json
  postcss.config.ts
  README.md
  tailwind.config.ts
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vercel.json
  vite.config.ts
.gitignore
DEAL_CARD_IMPROVEMENTS.md
MY_DEALS_IMPLEMENTATION.md
NAVBAR_CLEANUP_SUMMARY.md
UI_UX_OVERHAUL_SUMMARY.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="web/src/components/common/DealCardSkeleton.tsx">
// src/components/common/DealCardSkeleton.tsx
export const DealCardSkeleton = () => {
  return (
    <div className="animate-pulse overflow-hidden rounded-xl border border-neutral-200 bg-white shadow-sm">
      {/* Image skeleton */}
      <div className="aspect-[4/3] bg-neutral-200" />

      {/* Content skeleton */}
      <div className="space-y-3 p-4">
        {/* Title */}
        <div className="h-5 w-3/4 rounded bg-neutral-200" />

        {/* Rating and category */}
        <div className="flex items-center justify-between">
          <div className="h-4 w-16 rounded bg-neutral-200" />
          <div className="h-4 w-12 rounded bg-neutral-200" />
        </div>

        {/* Location */}
        <div className="h-4 w-1/2 rounded bg-neutral-200" />

        {/* Deal value */}
        <div className="h-6 w-2/3 rounded bg-neutral-200" />

        {/* Bottom section */}
        <div className="flex items-center justify-between pt-2">
          <div className="h-4 w-20 rounded bg-neutral-200" />
          <div className="h-8 w-16 rounded bg-neutral-200" />
        </div>
      </div>
    </div>
  );
};

export const CarouselSkeleton = ({ title }: { title: string }) => {
  return (
    <section className="py-8 sm:py-12 lg:py-16">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6 sm:mb-8">
          <h2 className="mb-2 text-2xl font-bold text-neutral-800 sm:text-3xl">
            {title}
          </h2>
          <div className="h-4 w-48 animate-pulse rounded bg-neutral-200" />
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3 xl:grid-cols-4">
          {Array.from({ length: 4 }).map((_, index) => (
            <DealCardSkeleton key={index} />
          ))}
        </div>
      </div>
    </section>
  );
};
</file>

<file path="web/src/components/landing/CompactDealCard.tsx">
// src/components/landing/CompactDealCard.tsx
import type { Deal } from '@/data/deals';
import { Heart, Star, Clock } from 'lucide-react';
import { useCountdown } from '@/hooks/useCountdown';
import { cn } from '@/lib/utils';

interface CompactDealCardProps {
  deal: Deal;
}

export const CompactDealCard = ({ deal }: CompactDealCardProps) => {
  const { hours, minutes } = useCountdown(deal.expiresAt || '');
  const showCountdown = deal.expiresAt && (hours > 0 || minutes > 0);

  return (
    <div className="group w-full cursor-pointer">
      {/* Image Container */}
      <div className="relative aspect-square overflow-hidden rounded-2xl bg-neutral-100 shadow-sm ring-1 ring-neutral-200/50 transition-all duration-300 group-hover:-translate-y-1 group-hover:shadow-lg group-hover:ring-brand-primary-300/30">
        <img
          src={deal.image}
          alt={deal.name}
          className="h-full w-full object-cover transition-transform duration-500 group-hover:scale-110"
        />

        {/* Overlay Gradient */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100" />

        {/* Tag */}
        {deal.tag && (
          <div className="absolute left-3 top-3 rounded-lg bg-white/95 px-2.5 py-1 text-xs font-bold text-neutral-900 shadow-lg ring-1 ring-white/20 backdrop-blur-sm">
            {deal.tag}
          </div>
        )}

        {/* Heart Button */}
        <button className="absolute right-3 top-3 flex h-9 w-9 items-center justify-center rounded-xl bg-white/10 text-white backdrop-blur-md transition-all duration-300 hover:scale-110 hover:bg-red-500 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-red-500/50">
          <Heart className="h-4.5 w-4.5" />
        </button>

        {/* Countdown Badge */}
        {showCountdown && (
          <div className="absolute bottom-3 right-3 flex items-center gap-1.5 rounded-lg bg-white/95 px-2.5 py-1.5 shadow-lg backdrop-blur-sm">
            <Clock className="h-3.5 w-3.5 text-red-500" />
            <span
              className={cn(
                'text-xs font-bold',
                hours < 1 ? 'text-red-600' : 'text-neutral-700',
              )}
            >
              {hours}h {minutes}m
            </span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="mt-4 space-y-2">
        <div className="flex items-start justify-between gap-3">
          <h3 className="line-clamp-2 text-base font-bold leading-tight text-neutral-900 transition-colors duration-200 group-hover:text-brand-primary-600">
            {deal.name}
          </h3>
          <div className="flex flex-shrink-0 items-center gap-1">
            <Star className="h-4 w-4 fill-amber-400 text-amber-400" />
            <span className="text-sm font-semibold text-neutral-700">
              {deal.rating.toFixed(1)}
            </span>
          </div>
        </div>

        <p className="truncate text-sm text-neutral-500">{deal.location}</p>

        <div className="flex items-center justify-between pt-1">
          <span className="text-base font-bold text-brand-primary-600">
            {deal.dealValue}
          </span>
          <span className="text-xs font-medium uppercase tracking-wider text-neutral-400">
            {deal.price}
          </span>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/layout/ConditionalLayout.tsx">
// src/components/layout/ConditionalLayout.tsx
import type { ReactNode } from 'react';
import { useLocation } from 'react-router-dom';
import { Header } from './Header';
import { MerchantHeader } from './MerchantHeader';
import { useMerchantStatus } from '@/hooks/useMerchantStatus';

interface ConditionalLayoutProps {
  children: ReactNode;
}

export const ConditionalLayout = ({ children }: ConditionalLayoutProps) => {
  const location = useLocation();
  const { data: merchantData } = useMerchantStatus();

  // Check if user is on merchant pages
  const isMerchantPage = location.pathname.startsWith('/merchant');

  // Check if user is an approved merchant
  const isApprovedMerchant =
    merchantData?.data?.merchant?.status === 'APPROVED';

  // Show MerchantHeader if:
  // 1. User is on merchant pages AND
  // 2. User is an approved merchant
  const showMerchantHeader = isMerchantPage && isApprovedMerchant;

  return (
    <>
      {showMerchantHeader ? <MerchantHeader /> : <Header />}
      <main className="min-h-screen">{children}</main>
    </>
  );
};
</file>

<file path="web/src/components/layout/MerchantDashboardLayout.tsx">
// src/components/layout/MerchantDashboardLayout.tsx
import { Outlet } from 'react-router-dom';

export const MerchantDashboardLayout = () => {
  return (
    <div className="container mx-auto p-4 sm:p-6 lg:p-8">
      <Outlet />
    </div>
  );
};
</file>

<file path="web/src/components/layout/MerchantHeader.tsx">
// src/components/layout/MerchantHeader.tsx
import { Link, NavLink } from 'react-router-dom';
import { Logo } from '../common/Logo';
import { Button } from '../common/Button';
import { PATHS } from '@/routing/paths';
import { PlusCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

export const MerchantHeader = () => {
  const navLinkClass = ({ isActive }: { isActive: boolean }) =>
    cn(
      'px-3 py-2 rounded-md text-sm font-semibold transition-colors',
      isActive
        ? 'bg-brand-primary-500/10 text-brand-primary-600'
        : 'text-neutral-600 hover:bg-neutral-100',
    );

  return (
    <header className="sticky top-0 z-40 border-b border-neutral-200 bg-white">
      <div className="container mx-auto flex h-20 max-w-screen-xl items-center justify-between px-6">
        <div className="flex items-center gap-8">
          <Logo />
          <nav className="hidden items-center gap-2 md:flex">
            <NavLink to={PATHS.MERCHANT_DASHBOARD} className={navLinkClass}>
              Dashboard
            </NavLink>
            <NavLink to="/merchant/deals" className={navLinkClass}>
              My Deals
            </NavLink>
            <NavLink to="/merchant/analytics" className={navLinkClass}>
              Analytics
            </NavLink>
          </nav>
        </div>
        <div className="flex items-center gap-3">
          <Link to={PATHS.HOME}>
            <Button variant="secondary" size="md" className="rounded-full">
              Switch to Browsing
            </Button>
          </Link>
          <Link to={PATHS.MERCHANT_DEALS_CREATE}>
            <Button size="md" className="rounded-full">
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Deal
            </Button>
          </Link>
        </div>
      </div>
    </header>
  );
};
</file>

<file path="web/src/components/layout/SimpleFooter.tsx">
import { Logo } from '../common/Logo';
import { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';

const socialLinks = [
  {
    href: '#',
    icon: <Facebook className="h-5 w-5" />,
  },
  {
    href: '#',
    icon: <Twitter className="h-5 w-5" />,
  },
  {
    href: '#',
    icon: <Instagram className="h-5 w-5" />,
  },
  {
    href: '#',
    icon: <Linkedin className="h-5 w-5" />,
  },
];

export const SimpleFooter = () => {
  return (
    <footer className="bg-[#222222] font-sans text-neutral-400">
      <div className="container mx-auto px-6 py-12">
        <div className="flex flex-col items-center text-center">
          <div className="mb-6">
            <Logo />
          </div>
          <p className="mb-6 max-w-md text-center">
            Your real-time guide to the best deals and hidden gems in your city.
          </p>
          <div className="mb-6 text-center">
            <p>+1 (234) 567-890</p>
            <p>hello@cityspark.app</p>
            <p>123 Spark Avenue, New York</p>
          </div>
          <div className="flex justify-center gap-5">
            {socialLinks.map((link, index) => (
              <a
                key={index}
                href={link.href}
                className="text-neutral-400 transition-colors hover:text-white"
              >
                {link.icon}
              </a>
            ))}
          </div>
        </div>
      </div>

      <div className="border-t border-neutral-700">
        <div className="container mx-auto px-6 py-4">
          <p className="text-center text-sm text-neutral-500">
            © {new Date().getFullYear()} CitySpark. All Rights Reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/DealBasicsStep.tsx">
// src/components/merchant/create-deal/DealBasicsStep.tsx
import { useNavigate } from 'react-router-dom';
import { useDealCreation } from '@/context/DealCreationContext';
import { OnboardingStepLayout } from '../onboarding/OnboardingStepLayout';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

export const DealBasicsStep = () => {
  const { state, dispatch } = useDealCreation();
  const navigate = useNavigate();

  return (
    <OnboardingStepLayout
      title="First, let's describe your deal"
      onNext={() => navigate('/merchant/deals/create/offer')}
      onBack={() => navigate(-1)}
      isNextDisabled={!state.title || !state.description}
      progress={20}
    >
      <div className="space-y-6">
        <div>
          <Label htmlFor="title" className="text-lg font-semibold">
            Deal Title
          </Label>
          <p className="mb-2 text-neutral-500">
            Make it catchy and clear, like "2-for-1 Happy Hour".
          </p>
          <Input
            id="title"
            value={state.title}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'title',
                value: e.target.value,
              })
            }
            className="h-14 text-lg"
            placeholder="Enter your deal title..."
          />
        </div>
        <div>
          <Label htmlFor="description" className="text-lg font-semibold">
            Description
          </Label>
          <p className="mb-2 text-neutral-500">
            Provide more details about what's included.
          </p>
          <Textarea
            id="description"
            value={state.description}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'description',
                value: e.target.value,
              })
            }
            className="min-h-[120px] text-base"
            rows={4}
            placeholder="Describe your deal in detail..."
          />
        </div>
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/DealInstructionsStep.tsx">
// src/components/merchant/create-deal/DealInstructionsStep.tsx
import { useNavigate } from 'react-router-dom';
import { useDealCreation } from '@/context/DealCreationContext';
import { OnboardingStepLayout } from '../onboarding/OnboardingStepLayout';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

export const DealInstructionsStep = () => {
  const { state, dispatch } = useDealCreation();
  const navigate = useNavigate();

  return (
    <OnboardingStepLayout
      title="How do customers redeem the deal?"
      onNext={() => navigate('/merchant/deals/create/review')}
      onBack={() => navigate(-1)}
      isNextDisabled={!state.redemptionInstructions}
      progress={80}
    >
      <div>
        <Label htmlFor="instructions" className="text-lg font-semibold">
          Redemption Instructions
        </Label>
        <p className="mb-2 text-neutral-500">
          Keep it simple. e.g., "Show this screen to the cashier."
        </p>
        <Textarea
          id="instructions"
          value={state.redemptionInstructions}
          onChange={(e) =>
            dispatch({
              type: 'UPDATE_FIELD',
              field: 'redemptionInstructions',
              value: e.target.value,
            })
          }
          className="min-h-[120px] text-base"
          rows={4}
        />
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/DealScheduleStep.tsx">
// src/components/merchant/create-deal/DealScheduleStep.tsx
import { useNavigate } from 'react-router-dom';
import { useDealCreation } from '@/context/DealCreationContext';
import { OnboardingStepLayout } from '../onboarding/OnboardingStepLayout';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

export const DealScheduleStep = () => {
  const { state, dispatch } = useDealCreation();
  const navigate = useNavigate();

  return (
    <OnboardingStepLayout
      title="When will your deal be available?"
      onNext={() => navigate('/merchant/deals/create/instructions')}
      onBack={() => navigate(-1)}
      isNextDisabled={!state.startTime || !state.endTime}
      progress={60}
    >
      <div className="space-y-6">
        <div>
          <Label htmlFor="startTime" className="text-lg font-semibold">
            Start Time
          </Label>
          <p className="mb-2 text-neutral-500">
            When customers can start claiming this deal.
          </p>
          <Input
            id="startTime"
            type="datetime-local"
            value={state.startTime}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'startTime',
                value: e.target.value,
              })
            }
            className="h-14 text-lg"
          />
        </div>
        <div>
          <Label htmlFor="endTime" className="text-lg font-semibold">
            End Time
          </Label>
          <p className="mb-2 text-neutral-500">
            The deal will no longer be visible after this time.
          </p>
          <Input
            id="endTime"
            type="datetime-local"
            value={state.endTime}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'endTime',
                value: e.target.value,
              })
            }
            className="h-14 text-lg"
          />
        </div>
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/merchant/MerchantDealCard.tsx">
// src/components/merchant/MerchantDealCard.tsx
import type { Deal } from '@/data/deals';
import { Button } from '@/components/common/Button';
import { Edit, Star, MapPin } from 'lucide-react';

interface MerchantDealCardProps {
  deal: Deal;
}

export const MerchantDealCard = ({ deal }: MerchantDealCardProps) => {
  const now = new Date();
  const expiresAt = deal.expiresAt ? new Date(deal.expiresAt) : null;
  const isExpired = expiresAt ? expiresAt <= now : false;
  const isLive = !isExpired && expiresAt; // If not expired and has expiry date, it's live

  return (
    <div className="group flex flex-col overflow-hidden rounded-2xl border border-neutral-200 bg-white shadow-sm transition-all duration-300 hover:border-brand-primary-200 hover:shadow-lg sm:flex-row">
      <div className="relative">
        <img
          src={deal.image}
          alt={deal.name}
          className="h-48 w-full object-cover transition-transform duration-300 group-hover:scale-105 sm:h-auto sm:w-56"
        />
        {/* Status Badge */}
        <div className="absolute left-3 top-3">
          {isLive && (
            <span className="inline-flex items-center rounded-full border border-green-200 bg-green-100 px-3 py-1 text-xs font-bold text-green-700">
              Live
            </span>
          )}
          {isExpired && (
            <span className="inline-flex items-center rounded-full border border-neutral-200 bg-neutral-100 px-3 py-1 text-xs font-bold text-neutral-600">
              Expired
            </span>
          )}
          {!expiresAt && (
            <span className="inline-flex items-center rounded-full border border-blue-200 bg-blue-100 px-3 py-1 text-xs font-bold text-blue-700">
              No Expiry
            </span>
          )}
        </div>
      </div>

      <div className="flex flex-grow flex-col p-6">
        <div className="mb-4 flex items-start justify-between">
          <div className="flex-grow">
            <h3 className="mb-2 text-xl font-bold text-neutral-900 transition-colors group-hover:text-brand-primary-600">
              {deal.name}
            </h3>
            <div className="flex items-center gap-4 text-sm text-neutral-600">
              <div className="flex items-center gap-1">
                <Star className="h-4 w-4 fill-amber-400 text-amber-400" />
                <span className="font-medium">{deal.rating.toFixed(1)}</span>
              </div>
              <div className="flex items-center gap-1">
                <MapPin className="h-4 w-4 text-neutral-400" />
                <span>{deal.location}</span>
              </div>
              <span className="rounded-lg bg-neutral-100 px-2 py-1 text-xs font-medium text-neutral-600">
                {deal.price}
              </span>
            </div>
          </div>
          <Button
            variant="secondary"
            size="sm"
            className="ml-4 flex-shrink-0 rounded-xl"
          >
            <Edit className="mr-2 h-4 w-4" />
            Edit
          </Button>
        </div>

        <div className="flex-grow">
          <p className="mb-2 text-base font-semibold text-brand-primary-600">
            {deal.dealValue || 'Special deal available'}
          </p>
          <p className="line-clamp-2 text-sm text-neutral-500">
            {deal.category} deal available
          </p>
        </div>

        <div className="mt-4 border-t border-neutral-100 pt-4">
          <p className="text-xs font-medium text-neutral-500">
            {expiresAt
              ? `Expires on ${expiresAt.toLocaleDateString('en-US', {
                  weekday: 'short',
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                })}`
              : 'No expiration date'}
          </p>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/ui/LoadingOverlay.tsx">
// src/components/ui/LoadingOverlay.tsx
import { motion } from 'framer-motion';
import { Logo } from '../common/Logo';

interface LoadingOverlayProps {
  message?: string;
}

export const LoadingOverlay = ({
  message = 'Loading...',
}: LoadingOverlayProps) => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex items-center justify-center"
    >
      {/* Blurred Background */}
      <div className="absolute inset-0 bg-white/80 backdrop-blur-md" />

      {/* Loading Content */}
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ delay: 0.1 }}
        className="relative z-10 flex flex-col items-center justify-center rounded-2xl border border-neutral-200/50 bg-white p-8 shadow-2xl"
      >
        {/* Animated Logo */}
        <div className="mb-6">
          <Logo />
        </div>

        {/* Loading Spinner */}
        <div className="relative mb-4">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
            className="border-3 h-8 w-8 rounded-full border-gray-200 border-t-brand-primary-500"
          />

          {/* Pulsing dots */}
          <div className="mt-4 flex justify-center space-x-1">
            {[0, 1, 2].map((index) => (
              <motion.div
                key={index}
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5],
                }}
                transition={{
                  duration: 1,
                  repeat: Infinity,
                  delay: index * 0.2,
                }}
                className="h-2 w-2 rounded-full bg-brand-primary-500"
              />
            ))}
          </div>
        </div>

        {/* Loading Message */}
        <motion.p
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="text-center font-medium text-neutral-600"
        >
          {message}
        </motion.p>

        {/* Subtitle */}
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="mt-2 text-center text-sm text-neutral-400"
        >
          Preparing your experience...
        </motion.p>
      </motion.div>
    </motion.div>
  );
};
</file>

<file path="web/src/components/ui/LoadingSpinner.tsx">
// src/components/ui/LoadingSpinner.tsx
import { motion } from 'framer-motion';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export const LoadingSpinner = ({
  size = 'md',
  className = '',
}: LoadingSpinnerProps) => {
  const sizeClasses = {
    sm: 'w-4 h-4 border-2',
    md: 'w-6 h-6 border-2',
    lg: 'w-8 h-8 border-3',
  };

  return (
    <motion.div
      animate={{ rotate: 360 }}
      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
      className={`${sizeClasses[size]} rounded-full border-gray-200 border-t-brand-primary-500 ${className}`}
    />
  );
};

// Loading dots animation
export const LoadingDots = ({ className = '' }: { className?: string }) => {
  return (
    <div className={`flex justify-center space-x-1 ${className}`}>
      {[0, 1, 2].map((index) => (
        <motion.div
          key={index}
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.5, 1, 0.5],
          }}
          transition={{
            duration: 0.8,
            repeat: Infinity,
            delay: index * 0.2,
          }}
          className="h-2 w-2 rounded-full bg-brand-primary-500"
        />
      ))}
    </div>
  );
};
</file>

<file path="web/src/components/ui/textarea.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<'textarea'>
>(({ className, ...props }, ref) => (
  <textarea
    className={cn(
      'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
      className,
    )}
    ref={ref}
    {...props}
  />
));
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="web/src/data/deals-new.ts">
export interface Deal {
  id: string;
  name: string;
  image: string;
  rating: number;
  category: string;
  price: '$$' | '$$$' | '$';
  location: string;
  tag?: string;

  // --- NEW DEAL-SPECIFIC FIELDS ---
  dealType?: 'Discount' | 'Happy Hour' | 'Kickback';
  dealValue?: string; // e.g., "50% OFF", "$5 Per Friend"
  originalValue?: number;
  discountValue?: number;
  expiresAt?: string; // ISO String for countdown timer
}

// Function to get a future date for mock data
const getFutureDate = (hours: number) =>
  new Date(Date.now() + hours * 60 * 60 * 1000).toISOString();

export const premiumDeals: Deal[] = [
  {
    id: 'pd1',
    name: 'Echoes Living Room',
    image:
      'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=500&q=80',
    rating: 4.6,
    category: 'Lounge',
    price: '$$$',
    location: 'GTB Nagar',
    tag: 'Guest Favourite',
    dealType: 'Happy Hour',
    dealValue: '2-for-1 Drinks',
    expiresAt: getFutureDate(3), // Expires in 3 hours
  },
  {
    id: 'pd2',
    name: 'The Irish House',
    image:
      'https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=400&q=80',
    rating: 4.4,
    category: 'Bar',
    price: '$$',
    location: 'Cyber Hub',
    tag: 'Top Rated',
    dealType: 'Discount',
    dealValue: '50% OFF',
    originalValue: 50,
    discountValue: 25,
    expiresAt: getFutureDate(26), // Expires in 26 hours
  },
  {
    id: 'pd3',
    name: 'Social',
    image:
      'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?w=400&q=80',
    rating: 4.1,
    category: 'Cafe',
    price: '$$',
    location: 'Hauz Khas',
    dealType: 'Kickback',
    dealValue: '$5 Per Friend',
    expiresAt: getFutureDate(72), // Expires in 3 days
  },
  {
    id: 'pd4',
    name: 'Mai Bao',
    image:
      'https://images.unsplash.com/photo-1585518419759-7fe2e0fbf8a6?w=500&q=80',
    rating: 4.0,
    category: 'Asian',
    price: '$',
    location: 'Saket',
    tag: 'New Deal',
    dealType: 'Discount',
    dealValue: '30% OFF',
    originalValue: 25,
    discountValue: 7.5,
    expiresAt: getFutureDate(8),
  },
];

// Export arrays for homepage use - all using premiumDeals
export const topRatedDeals: Deal[] = premiumDeals;
export const happyHourDeals: Deal[] = premiumDeals.filter(
  (d) => d.dealType === 'Happy Hour',
);
export const experiencesData: Deal[] = premiumDeals;
export const newDeals: Deal[] = premiumDeals;
export const bookTonightDeals: Deal[] = premiumDeals;

// For the /deals page - extended interface with additional fields
export interface DealWithLocation extends Deal {
  position: [number, number];
  description: string;
  originalPrice: number;
  discountedPrice: number;
  bookingInfo: string;
}

export const allDeals: DealWithLocation[] = [
  {
    id: 'ad1',
    name: 'Cafe Hawkers',
    image:
      'https://images.unsplash.com/photo-1559925393-8be0ec4767c8?w=500&q=80',
    rating: 4.1,
    category: 'Cafe',
    price: '$$',
    location: 'Connaught Place',
    position: [40.7128, -74.006],
    description:
      "Today's special brew is 50% off until 4 PM. Unlock to reveal!",
    originalPrice: 12559,
    discountedPrice: 11659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Discount',
    dealValue: '50% OFF',
    originalValue: 20,
    discountValue: 10,
    expiresAt: getFutureDate(4),
  },
  {
    id: 'ad2',
    name: 'Out Of The Box Courtyard',
    image:
      'https://images.unsplash.com/photo-1590846406792-0adc7f938f1d?w=500&q=80',
    rating: 4.3,
    category: 'Multi-cuisine',
    price: '$$$',
    location: 'Connaught Place',
    position: [40.7145, -74.0082],
    description:
      'Enjoy a free dessert with any main course. Perfect for a sunny afternoon.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Happy Hour',
    dealValue: 'Free Dessert',
    expiresAt: getFutureDate(12),
  },
  {
    id: 'ad3',
    name: 'Echoes Living Room',
    image:
      'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=500&q=80',
    rating: 4.6,
    category: 'Lounge',
    price: '$$$',
    location: 'GTB Nagar',
    position: [40.7295, -73.9965],
    description:
      'Happy Hour specials on all imported drinks from 5 PM to 7 PM.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Happy Hour',
    dealValue: '2-for-1 Drinks',
    expiresAt: getFutureDate(3),
  },
  {
    id: 'ad4',
    name: 'Mai Bao',
    image:
      'https://images.unsplash.com/photo-1585518419759-7fe2e0fbf8a6?w=500&q=80',
    rating: 4.0,
    category: 'Asian',
    price: '$',
    location: 'Saket',
    position: [40.723, -73.993],
    description: 'Quick lunch deal: Get a bao trio for the price of two.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Discount',
    dealValue: '30% OFF',
    originalValue: 25,
    discountValue: 7.5,
    expiresAt: getFutureDate(8),
  },
  {
    id: 'ad5',
    name: "The Passenger's Bar",
    image:
      'https://images.unsplash.com/photo-1543007631-283050bb3e8c?w=500&q=80',
    rating: 2.9,
    category: 'Bar',
    price: '$$',
    location: 'Kailash Colony',
    position: [40.731, -74.0055],
    description:
      'Live music tonight! No cover charge. Check in for a complimentary shooter.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Kickback',
    dealValue: 'Free Entry',
    expiresAt: getFutureDate(18),
  },
];
</file>

<file path="web/src/hooks/useMerchantStatus.ts">
// src/hooks/useMerchantStatus.ts
import { useQuery } from '@tanstack/react-query';
import { apiGet } from '@/services/api';
import { useAuth } from '@/context/useAuth';

interface MerchantStatus {
  id: number;
  status: 'PENDING' | 'APPROVED' | 'REJECTED';
  businessName: string;
  address: string;
  description?: string;
  logoUrl?: string;
  createdAt: string;
  updatedAt: string;
}

export const useMerchantStatus = () => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['merchantStatus', user?.id],
    queryFn: () => apiGet<{ merchant: MerchantStatus }>('/merchants/status'),
    enabled: !!user, // Only run this query if the user is logged in
    retry: false, // Don't retry if it fails (e.g., 404 for non-merchants)
  });
};
</file>

<file path="web/src/pages/merchant/MerchantCalendarPage.tsx">
// src/pages/merchant/MerchantCalendarPage.tsx
export const MerchantCalendarPage = () => {
  return (
    <div className="py-16 text-center">
      <div className="mx-auto mb-4 h-24 w-24 text-neutral-300">
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z" />
        </svg>
      </div>
      <h2 className="text-2xl font-bold text-neutral-800">
        Calendar coming soon
      </h2>
      <p className="mt-2 text-neutral-500">
        Manage your availability and booking schedule.
      </p>
    </div>
  );
};
</file>

<file path="web/src/pages/merchant/MerchantMessagesPage.tsx">
// src/pages/merchant/MerchantMessagesPage.tsx
export const MerchantMessagesPage = () => {
  return (
    <div className="py-16 text-center">
      <div className="mx-auto mb-4 h-24 w-24 text-neutral-300">
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z" />
        </svg>
      </div>
      <h2 className="text-2xl font-bold text-neutral-800">
        Messages coming soon
      </h2>
      <p className="mt-2 text-neutral-500">
        Chat with customers about their reservations.
      </p>
    </div>
  );
};
</file>

<file path="web/src/pages/merchant/MerchantMyDealsPage.tsx">
// src/pages/merchant/MerchantMyDealsPage.tsx
import { Button } from '@/components/common/Button';
import { Plus } from 'lucide-react';
import { Link } from 'react-router-dom';
import { PATHS } from '@/routing/paths';
import { useQuery } from '@tanstack/react-query';
import { apiGet } from '@/services/api';
import { MerchantDealCard } from '@/components/merchant/MerchantDealCard';
import type { Deal } from '@/data/deals';

export const MerchantMyDealsPage = () => {
  const { data: dealsResponse, isLoading } = useQuery({
    queryKey: ['my-deals'],
    queryFn: () => apiGet<Deal[]>('/merchants/my-deals'),
  });

  const deals = dealsResponse?.data || [];

  return (
    <div>
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-3xl font-bold">My Deals</h1>
        <Link to={PATHS.MERCHANT_DEALS_CREATE}>
          <Button size="md" className="rounded-lg">
            <Plus className="mr-2 h-4 w-4" />
            Create Deal
          </Button>
        </Link>
      </div>

      {isLoading && <p>Loading your deals...</p>}

      {!isLoading && deals.length === 0 ? (
        <div className="rounded-lg border-2 border-dashed border-neutral-200 py-16 text-center">
          <h2 className="text-xl font-bold text-neutral-800">
            You haven't created any deals yet
          </h2>
          <p className="mx-auto mt-2 max-w-md text-neutral-500">
            Click the "Create Deal" button above to get started and attract new
            customers.
          </p>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {deals.map((deal) => (
            <MerchantDealCard key={deal.id} deal={deal} />
          ))}
        </div>
      )}
    </div>
  );
};
</file>

<file path="web/src/pages/merchant/MerchantTodayPage.tsx">
// src/pages/merchant/MerchantTodayPage.tsx

const EmptyStateIllustration = () => (
  <svg
    className="mx-auto h-24 w-24 text-neutral-300"
    viewBox="0 0 24 24"
    fill="none"
  >
    <path
      d="M4 2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zM4 4v16h16V4H4zm2 2h12v2H6V6zm0 4h12v2H6v-2zm0 4h8v2H6v-2z"
      fill="currentColor"
    />
  </svg>
);

export const MerchantTodayPage = () => {
  // In a real app, you'd fetch reservations
  const reservations = [];

  return (
    <div>
      {reservations.length === 0 ? (
        <div className="py-16 text-center">
          <EmptyStateIllustration />
          <h2 className="mt-4 text-2xl font-bold text-neutral-800">
            You don't have any reservations
          </h2>
          <p className="mt-2 text-neutral-500">
            When a guest books a deal, their reservation will appear here.
          </p>
        </div>
      ) : (
        <div>{/* List of reservations would go here */}</div>
      )}
    </div>
  );
};
</file>

<file path="web/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="web/.prettierrc.cjs">
module.exports = {
  semi: true,
  singleQuote: true,
  trailingComma: 'all',
  printWidth: 80,
  tabWidth: 2,
  plugins: ['prettier-plugin-tailwindcss'],
};
</file>

<file path="web/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
]);
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x';
import reactDom from 'eslint-plugin-react-dom';

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
]);
```
</file>

<file path="web/vercel.json">
{
  "rewrites": [
    {
      "source": "/((?!api/.*).*)",
      "destination": "/index.html"
    }
  ]
}
</file>

<file path=".gitignore">
backend
/backend
</file>

<file path="DEAL_CARD_IMPROVEMENTS.md">
# Deal Card UI Consistency Improvements

## 🎯 Objective
Enhanced the deal cards to be more consistent with the overall design system, improving visual hierarchy, brand consistency, and user experience across all card components.

## ✨ Key Improvements Made

### 1. **CompactDealCard Enhancements**

#### Visual Design
- **Rounded corners**: Upgraded from `rounded-xl` to `rounded-2xl` for a more modern look
- **Enhanced shadows**: Added ring borders and improved shadow progression on hover
- **Better aspect ratio**: Changed from square to `4:5` for better content display
- **Brand colors**: Integrated brand primary colors (`brand-primary-600`) for deal values and hover states
- **Improved gradients**: Added subtle overlay gradients on hover for depth

#### Interactive Elements
- **Heart button**: Larger, more prominent with backdrop blur and better hover states
- **Hover animations**: Smoother transitions with scale and translate effects
- **Enhanced feedback**: Added ring colors and shadow changes on hover
- **Better focus states**: Proper focus rings for accessibility

#### Content Organization
- **Typography hierarchy**: Improved font sizes and weights for better readability
- **Star ratings**: Used proper amber colors (`fill-amber-400`) for visual consistency
- **Countdown badges**: Redesigned with clock icon and better positioning
- **Tag styling**: Enhanced with rings and better backdrop blur

#### Brand Consistency
- **Primary colors**: Used `brand-primary-600` for deal values and hover states
- **Consistent spacing**: Applied `mt-4` and `space-y-2` for proper rhythm
- **Typography scale**: Used appropriate font sizes (`text-base`, `text-sm`)

### 2. **MerchantDealCard Improvements**

#### Professional Layout
- **Enhanced structure**: Better organized with improved spacing and hierarchy
- **Status badges**: Redesigned with proper borders and better contrast
- **Image handling**: Improved aspect ratio and hover effects
- **Content sections**: Clear separation with borders and proper spacing

#### Information Architecture
- **Metadata display**: Added star ratings, location, and price category
- **Deal highlighting**: Made deal value prominent with brand colors
- **Action buttons**: Better positioned and styled edit buttons
- **Date formatting**: Enhanced date display with better formatting

#### Visual Consistency
- **Border radius**: Updated to `rounded-2xl` for consistency
- **Hover states**: Added subtle hover effects and border color changes
- **Color scheme**: Consistent use of brand colors and neutral grays
- **Shadow system**: Proper shadow progression matching the design system

### 3. **ContentCarousel Optimizations**

#### Spacing Improvements
- **Card spacing**: Increased gap from `6` to `8` for better breathing room
- **Card sizes**: Optimized width from `240px/260px` to `280px/300px`
- **Bottom padding**: Increased from `pb-4` to `pb-6` for better visual balance

## 🎨 Design System Alignment

### Colors Used
- **Brand Primary**: `brand-primary-600` for key elements and hover states
- **Amber**: `fill-amber-400` for star ratings
- **Red**: `red-500/red-600` for urgency (countdown, heart hover)
- **Neutral Scale**: Proper neutral gray progression for text hierarchy

### Typography
- **Headings**: `text-base` to `text-xl` with `font-bold` for titles
- **Body**: `text-sm` for secondary information
- **Labels**: `text-xs` for meta information and badges

### Spacing
- **Consistent rhythm**: Using Tailwind's spacing scale (2, 3, 4, 6, 8)
- **Internal padding**: `p-6` for cards, `px-3 py-1` for badges
- **Margins**: `mt-4`, `mb-2` for section separation

### Shadows & Effects
- **Base shadow**: `shadow-sm` for cards at rest
- **Hover shadow**: `shadow-lg` for interactive feedback
- **Ring effects**: `ring-1 ring-neutral-200/50` for subtle borders
- **Backdrop blur**: `backdrop-blur-sm/md` for overlay elements

## 🚀 Benefits Achieved

### User Experience
- ✅ **Better visual hierarchy** with improved typography scale
- ✅ **Clearer information architecture** with organized content sections
- ✅ **Enhanced interactivity** with smooth hover states and feedback
- ✅ **Improved accessibility** with proper focus states and contrast

### Brand Consistency
- ✅ **Unified color palette** using design system colors
- ✅ **Consistent component patterns** across all card types
- ✅ **Professional appearance** matching modern design standards
- ✅ **Cohesive user interface** with aligned visual elements

### Developer Experience
- ✅ **Maintainable code** with consistent patterns
- ✅ **Reusable components** following design system principles
- ✅ **Responsive design** that works across all screen sizes
- ✅ **Scalable architecture** for future enhancements

## 📱 Responsive Behavior
- **Mobile**: Optimized touch targets and readable text sizes
- **Tablet**: Proper spacing and hover states
- **Desktop**: Enhanced animations and detailed information display

---

The deal cards now provide a premium, consistent experience that aligns with the overall design system while maintaining excellent usability and visual appeal across all device sizes.
</file>

<file path="MY_DEALS_IMPLEMENTATION.md">
# My Deals Feature Implementation Summary

## 🎯 Overview
Successfully implemented the "My Deals" functionality for the merchant dashboard, allowing merchants to view and manage their created deals with a professional interface.

## ✅ Implementation Completed

### Backend Changes
- **Added** new endpoint `GET /api/merchants/my-deals` in `backend/src/routes/merchant.routes.ts`
- **Fetches** all deals created by the authenticated and approved merchant
- **Includes** proper error handling and authentication middleware
- **Returns** deals ordered by creation date (newest first)

### Frontend Changes

#### 1. Routing & Navigation
- **Updated** `src/routing/paths.ts` with new `MERCHANT_MY_DEALS` path
- **Modified** `MerchantDashboardLayout` navigation from "Listings" to "My Deals"
- **Updated** `App.tsx` routing to use the new page component

#### 2. New Components Created
- **`MerchantDealCard`**: Professional deal management card component
  - Shows deal status (Live, Expired, No Expiry)
  - Displays deal image, title, and value
  - Includes edit button for future functionality
  - Responsive design with proper mobile layout

- **`MerchantMyDealsPage`**: Main page component
  - Uses React Query for data fetching
  - Shows loading states
  - Displays helpful empty state when no deals exist
  - Includes "Create Deal" button in header
  - Grid layout for deal cards

#### 3. Integration Features
- **React Query** integration for efficient data fetching and caching
- **Authentication** handled through existing API client
- **Responsive design** following established design patterns
- **Error handling** with proper loading and empty states

## 🔧 Technical Details

### API Endpoint
```
GET /api/merchants/my-deals
Authorization: Bearer <token>
Response: Deal[]
```

### React Query Integration
```typescript
const { data: dealsResponse, isLoading } = useQuery({
    queryKey: ['my-deals'],
    queryFn: () => apiGet<Deal[]>('/merchants/my-deals'),
});
```

### Deal Status Logic
- **Live**: Deal has expiry date and hasn't expired yet
- **Expired**: Deal has passed its expiry date
- **No Expiry**: Deal doesn't have an expiration date set

## 🎨 UI/UX Features

### Professional Deal Cards
- **Image preview** with proper aspect ratio
- **Status badges** with color-coded indicators
- **Deal information** clearly displayed
- **Edit functionality** ready for future implementation
- **Responsive layout** adapting to mobile and desktop

### Empty State
- **Helpful messaging** explaining next steps
- **Clear call-to-action** to create first deal
- **Professional design** maintaining brand consistency

### Navigation
- **Intuitive tab structure** in merchant dashboard
- **Active state indicators** for current page
- **Consistent naming** using "My Deals" terminology

## 🚀 Ready Features
- ✅ View all merchant's deals
- ✅ Deal status indicators
- ✅ Responsive design
- ✅ Loading states
- ✅ Empty states
- ✅ Professional navigation
- ✅ Create deal button integration

## 🔮 Future Enhancements
- **Edit Deal functionality** (Edit button ready)
- **Deal analytics** (views, redemptions, etc.)
- **Bulk operations** (activate/deactivate multiple deals)
- **Deal performance metrics**
- **Advanced filtering and search**

---

The "My Deals" feature is now fully functional and provides merchants with a professional tool to view and manage their deals, maintaining the high design standards established in the UI/UX overhaul.
</file>

<file path="NAVBAR_CLEANUP_SUMMARY.md">
# Business Dashboard Navigation Cleanup

## 🎯 Problem Solved
Removed the redundant second navbar from the business dashboard to eliminate confusion and create a cleaner, more intuitive navigation experience.

## ✅ Changes Made

### 1. **Simplified MerchantDashboardLayout**
- **Removed** the secondary navigation bar with "Today", "My Deals", "Calendar", "Messages"
- **Kept** only the container wrapper for consistent spacing
- **Eliminated** duplicate navigation that was confusing users

### 2. **Enhanced MerchantHeader Navigation**
- **Updated** primary navigation to include all essential links:
  - Today (Dashboard)
  - My Deals
  - Calendar 
  - Messages
- **Maintained** the "Create Deal" button for quick access
- **Preserved** the "Switch to Browsing" functionality

## 🎨 Result
- **Single source of navigation** in the header
- **Cleaner visual hierarchy** without redundant elements
- **Better user experience** with unified navigation
- **Consistent with modern app patterns** (single top navbar)

## 📝 Files Modified

### Updated Components
1. **`MerchantDashboardLayout.tsx`**
   - Simplified to only provide container styling
   - Removed redundant navigation tabs

2. **`MerchantHeader.tsx`**
   - Updated navigation links to match dashboard sections
   - Consolidated all navigation into single header bar

## 🚀 Benefits
- ✅ **Reduced cognitive load** - users don't have to decide between two navbars
- ✅ **Cleaner interface** - more space for actual content
- ✅ **Modern UX pattern** - follows standard single-header navigation
- ✅ **Consistent experience** - navigation always visible and accessible
- ✅ **Mobile-friendly** - single header adapts better to smaller screens

---

The business dashboard now has a clean, professional navigation structure that matches modern app design patterns and provides an intuitive user experience.
</file>

<file path="UI_UX_OVERHAUL_SUMMARY.md">
# Comprehensive UI/UX Overhaul - Implementation Summary

## Overview
Successfully implemented a comprehensive UI/UX overhaul following the Airbnb-inspired design principles to create a cohesive, premium application experience. This addresses the previous inconsistencies and elevates the entire user experience to match the high standards of the landing page.

## 🎯 Key Achievements

### 1. **Homepage Card Redesign**
- ✅ **Replaced** large, generic `PremiumDealCard` with elegant `CompactDealCard`
- ✅ **Implemented** Airbnb-style smaller, more scannable cards
- ✅ **Applied** proper aspect ratio (4:5) for better visual hierarchy
- ✅ **Enhanced** hover effects and image scaling
- ✅ **Optimized** information density with better typography

### 2. **Premium Merchant Dashboard**
- ✅ **Created** professional multi-tab dashboard layout (`MerchantDashboardLayout`)
- ✅ **Implemented** Airbnb-inspired navigation with "Today", "Listings", "Calendar", "Messages"
- ✅ **Built** meaningful empty states with illustrations
- ✅ **Established** consistent spacing and typography throughout

### 3. **Unified Design System**
- ✅ **Standardized** spacing, shadows, and border radius across components
- ✅ **Ensured** consistent color palette and typography hierarchy
- ✅ **Applied** professional interactions and micro-animations
- ✅ **Maintained** responsive design principles

## 📁 Files Created

### New Components
1. **`src/components/landing/CompactDealCard.tsx`**
   - Airbnb-inspired deal card with better information hierarchy
   - Optimized aspect ratio and hover effects
   - Clean typography and spacing

2. **`src/components/layout/MerchantDashboardLayout.tsx`**
   - Professional tab navigation for merchant dashboard
   - Consistent styling with active states
   - Nested routing support

### New Pages
3. **`src/pages/merchant/MerchantTodayPage.tsx`**
   - "Today" view with empty state illustration
   - Professional messaging for merchants

4. **`src/pages/merchant/MerchantListingsPage.tsx`**
   - "Listings" management page
   - Call-to-action for creating first listing
   - Clean empty state design

5. **`src/pages/merchant/MerchantCalendarPage.tsx`**
   - Placeholder calendar page with coming soon message
   - Consistent empty state design

6. **`src/pages/merchant/MerchantMessagesPage.tsx`**
   - Placeholder messages page
   - Proper iconography and messaging

## 🔄 Files Modified

### Updated Components
1. **`src/components/common/ContentCarousel.tsx`**
   - Switched from `PremiumDealCard` to `CompactDealCard`
   - Adjusted responsive widths (240px/260px vs 320px/350px)
   - Maintained smooth scrolling and navigation

2. **`src/components/deals/DealsSidebar.tsx`**
   - Updated to use new `CompactDealCard` for consistency
   - Maintained existing functionality

### Updated Routing
3. **`src/App.tsx`**
   - Implemented nested routing structure for merchant dashboard
   - Added new dashboard pages to routing
   - Maintained protected route structure
   - Separated onboarding from main dashboard flow

## 🗑️ Files Removed
- **`src/components/deals/PremiumDealCard.tsx`** - Replaced with CompactDealCard

## 🎨 Design Improvements

### Visual Hierarchy
- **Cards**: Smaller, more elegant with better image-to-content ratio
- **Typography**: Consistent font weights and sizing throughout
- **Spacing**: Proper use of whitespace for breathing room
- **Shadows**: Subtle, consistent elevation system

### User Experience
- **Navigation**: Intuitive tab-based merchant dashboard
- **Empty States**: Helpful, illustrated empty states with clear actions
- **Responsive**: Maintained mobile-first responsive design
- **Interactions**: Smooth hover effects and transitions

### Information Architecture
- **Homepage**: Cleaner deal presentation with better scannability
- **Dashboard**: Logical organization into Today, Listings, Calendar, Messages
- **Hierarchy**: Clear visual hierarchy with proper information prioritization

## 🚀 Technical Implementation

### Component Architecture
- Used TypeScript for type safety
- Implemented proper prop interfaces
- Maintained existing context and state management
- Followed existing naming conventions

### Styling
- Used Tailwind CSS for consistent styling
- Implemented proper responsive breakpoints
- Used CSS Grid and Flexbox for layouts
- Maintained existing design tokens

### Routing
- Implemented nested routing with React Router
- Maintained protected route patterns
- Created scalable structure for future features

## 🔮 Future Enhancements Ready

### Immediate Opportunities
1. **Calendar Integration**: Real availability management
2. **Messaging System**: Customer communication
3. **Listings Management**: Full CRUD operations for deals
4. **Analytics Dashboard**: Business insights on Today page

### Scalability
- Component structure supports easy feature additions
- Routing structure accommodates new merchant features
- Design system provides consistent foundation for growth

## ✨ Result
The application now delivers a **cohesive, premium user experience** that matches the quality of the landing page throughout the entire user journey. The merchant dashboard feels professional and intuitive, while the homepage cards provide better information hierarchy and visual appeal. This foundation supports future feature development while maintaining design consistency.

---

*This overhaul successfully transforms the application from having inconsistent UI patterns to delivering a unified, Airbnb-quality experience across all user touchpoints.*
</file>

<file path=".github/workflows/web-ci.yml">
# .github/workflows/web-ci.yml

name: Web Application CI

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'web/**'  
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'web/**'  

jobs:
  build_and_test:
    name: Build and Test Web App
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm lint

      - name: Run build
        run: pnpm build
</file>

<file path="web/src/components/landing/CtaCard.tsx">
import { ArrowRight } from 'lucide-react';
import { Button } from '@/components/common/Button';

export const CtaCard = () => {
  return (
    <div className="flex h-full flex-col items-center justify-center p-6 text-center">
      <h3 className="text-neutral-text-primary text-xl font-semibold">
        Ready to Explore?
      </h3>
      <p className="text-neutral-text-secondary mb-4 mt-2 text-sm">
        The best of your city is waiting.
      </p>
      <Button
        variant="primary"
        size="lg"
        icon={<ArrowRight className="h-4 w-4" />}
        iconPosition="right"
      >
        Get the App
      </Button>
    </div>
  );
};
</file>

<file path="web/src/components/landing/DealMap.tsx">
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

const createPulsatingIcon = (isHovered: boolean) => {
  return L.divIcon({
    className: 'custom-pulsating-icon',
    html: `<div class="w-5 h-5 rounded-full bg-gradient-to-r from-brand-primary-400 to-brand-primary-600 flex items-center justify-center ring-4 ${isHovered ? 'ring-brand-primary-400/60' : 'ring-brand-primary-400/40'} transition-all duration-300">
             <div class="w-2 h-2 rounded-full bg-white ${isHovered ? 'animate-pulse' : ''}"></div>
           </div>`,
    iconSize: [20, 20],
    iconAnchor: [10, 10],
  });
};

const ChangeView = ({
  center,
  zoom,
}: {
  center: L.LatLngExpression;
  zoom: number;
}) => {
  const map = useMap();
  map.setView(center, zoom);
  return null;
};

interface DealMapProps {
  deals: Array<{
    id: number;
    name: string;
    business: string;
    distance: string;
    position: L.LatLngExpression;
    category: string;
  }>;
  mapCenter: L.LatLngExpression;
  hoveredDealId: number | null;
}

export const DealMap = ({ deals, mapCenter, hoveredDealId }: DealMapProps) => {
  return (
    <div className="relative h-64 w-full bg-gray-200 sm:h-auto sm:w-1/2">
      <MapContainer
        center={mapCenter}
        zoom={14}
        scrollWheelZoom={false}
        className="h-full w-full"
      >
        <ChangeView center={mapCenter} zoom={14} />
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        {deals.map((deal) => (
          <Marker
            key={deal.id}
            position={deal.position}
            icon={createPulsatingIcon(hoveredDealId === deal.id)}
          >
            <Popup>
              <div className="font-sans">
                <b className="text-sm">{deal.name}</b>
                <br />
                <span className="text-xs">{deal.business}</span>
              </div>
            </Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  );
};
</file>

<file path="web/src/components/landing/HappyHourCard.tsx">
import { useState, useEffect } from 'react';
import { Flame } from 'lucide-react';

export const HappyHourCard = () => {
  const [timeLeft, setTimeLeft] = useState({ minutes: 24, seconds: 18 });

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev.seconds > 0) return { ...prev, seconds: prev.seconds - 1 };
        if (prev.minutes > 0) return { minutes: prev.minutes - 1, seconds: 59 };
        return { minutes: 0, seconds: 0 };
      });
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="bg-accent-urgent flex h-full flex-col justify-between p-6 text-white">
      <div>
        <Flame className="h-6 w-6" />
        <h3 className="mt-2 text-lg font-semibold">Happy Hour Ending!</h3>
      </div>
      <div className="text-4xl font-bold tracking-tighter">
        {`${String(timeLeft.minutes).padStart(2, '0')}:${String(timeLeft.seconds).padStart(2, '0')}`}
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/SearchHeader.tsx">
export const SearchHeader = () => {
  return (
    <section className="bg-white pb-8 pt-12">
      <div className="container mx-auto px-4">
        <h1 className="mb-6 text-center text-4xl font-extrabold text-neutral-800 sm:text-5xl">
          Find your next experience
        </h1>
      </div>
    </section>
  );
};
</file>

<file path="web/src/components/layout/SearchModal.tsx">
import { AnimatePresence, motion } from 'framer-motion';
import { X, Search, MapPin, Calendar, Users } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '../common/Button';
import { Input } from '../ui/input';
import { useEffect } from 'react';

interface SearchModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const searchSchema = z.object({
  query: z.string().min(1, 'Please enter a search term'),
  date: z.string(), // For now, a simple string. Can be replaced with a date picker.
  guests: z.number().min(1),
});

type SearchFormValues = z.infer<typeof searchSchema>;

export const SearchModal = ({ isOpen, onClose }: SearchModalProps) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<SearchFormValues>({
    resolver: zodResolver(searchSchema),
    defaultValues: {
      guests: 1,
    },
  });

  const onSubmit = (data: SearchFormValues) => {
    console.log('Search Submitted:', data);
    // Here you would typically trigger the search, e.g., navigate to a search results page
    // For now, we'll just log it and close the modal.
    onClose();
  };

  // Effect to handle the 'Escape' key to close the modal
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [onClose]);

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-start justify-center pt-20">
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm"
            onClick={onClose}
          />

          {/* Modal Panel */}
          <motion.div
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 50 }}
            transition={{ type: 'spring', damping: 25, stiffness: 200 }}
            className="relative z-10 w-full max-w-2xl rounded-xl bg-white shadow-2xl"
            // Stop clicks inside the modal from closing it
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
              <div className="mb-4 flex items-center justify-between">
                <h2 className="text-xl font-bold text-neutral-800">
                  Find a Deal
                </h2>
                <button
                  onClick={onClose}
                  className="-mr-2 rounded-full p-2 hover:bg-neutral-100"
                  aria-label="Close search modal"
                >
                  <X className="h-6 w-6 text-neutral-600" />
                </button>
              </div>

              <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                {/* What */}
                <div>
                  <label className="text-sm font-semibold">
                    What are you looking for?
                  </label>
                  <div className="relative mt-1">
                    <MapPin className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-neutral-400" />
                    <Input
                      {...register('query')}
                      placeholder="e.g., Tacos, Happy Hour, Pizza"
                      className="h-12 pl-10"
                    />
                    {errors.query && (
                      <p className="mt-1 text-xs text-red-500">
                        {errors.query.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  {/* When */}
                  <div>
                    <label className="text-sm font-semibold">When?</label>
                    <div className="relative mt-1">
                      <Calendar className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-neutral-400" />
                      <Input
                        {...register('date')}
                        placeholder="Select a date"
                        className="h-12 pl-10"
                      />
                    </div>
                  </div>
                  {/* Who */}
                  <div>
                    <label className="text-sm font-semibold">
                      How many guests?
                    </label>
                    <div className="relative mt-1">
                      <Users className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-neutral-400" />
                      <Input
                        {...register('guests', { valueAsNumber: true })}
                        type="number"
                        min="1"
                        className="h-12 pl-10"
                      />
                    </div>
                  </div>
                </div>

                <div className="pt-2">
                  <Button type="submit" size="lg" className="w-full">
                    <Search className="mr-2 h-5 w-5" />
                    Search
                  </Button>
                </div>
              </form>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/DealOfferStep.tsx">
// src/components/merchant/create-deal/DealOfferStep.tsx
import { useNavigate } from 'react-router-dom';
import { useDealCreation } from '@/context/DealCreationContext';
import { OnboardingStepLayout } from '../onboarding/OnboardingStepLayout';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Percent, Minus } from 'lucide-react';
import { cn } from '@/lib/utils';

export const DealOfferStep = () => {
  const { state, dispatch } = useDealCreation();
  const navigate = useNavigate();

  const isNextDisabled =
    !state.dealType ||
    (state.dealType === 'percentage' && !state.discountPercentage) ||
    (state.dealType === 'amount' && !state.discountAmount);

  return (
    <OnboardingStepLayout
      title="What kind of offer is it?"
      onNext={() => navigate('/merchant/deals/create/schedule')}
      onBack={() => navigate(-1)}
      isNextDisabled={isNextDisabled}
      progress={40}
    >
      <div className="space-y-6">
        <div className="grid grid-cols-2 gap-4">
          <button
            onClick={() =>
              dispatch({ type: 'SET_DEAL_TYPE', dealType: 'percentage' })
            }
            className={cn(
              'rounded-lg border-2 p-6 text-left transition-all',
              state.dealType === 'percentage'
                ? 'border-brand-primary-500 bg-brand-primary-50'
                : 'border-neutral-200 bg-white hover:border-neutral-300',
            )}
          >
            <Percent className="mb-2 h-6 w-6 text-brand-primary-600" />
            <p className="font-bold">Percentage Off</p>
            <p className="mt-1 text-sm text-neutral-500">
              e.g., 25% off total bill
            </p>
          </button>
          <button
            onClick={() =>
              dispatch({ type: 'SET_DEAL_TYPE', dealType: 'amount' })
            }
            className={cn(
              'rounded-lg border-2 p-6 text-left transition-all',
              state.dealType === 'amount'
                ? 'border-brand-primary-500 bg-brand-primary-50'
                : 'border-neutral-200 bg-white hover:border-neutral-300',
            )}
          >
            <Minus className="mb-2 h-6 w-6 text-brand-primary-600" />
            <p className="font-bold">Fixed Amount Off</p>
            <p className="mt-1 text-sm text-neutral-500">
              e.g., $5 off any order
            </p>
          </button>
        </div>

        {state.dealType === 'percentage' && (
          <div>
            <Label htmlFor="percentage" className="text-lg font-semibold">
              Discount Percentage (%)
            </Label>
            <Input
              id="percentage"
              type="number"
              value={state.discountPercentage || ''}
              onChange={(e) =>
                dispatch({
                  type: 'UPDATE_FIELD',
                  field: 'discountPercentage',
                  value: parseInt(e.target.value) || null,
                })
              }
              className="mt-2 h-14 text-lg"
              placeholder="e.g., 50"
            />
          </div>
        )}

        {state.dealType === 'amount' && (
          <div>
            <Label htmlFor="amount" className="text-lg font-semibold">
              Discount Amount ($)
            </Label>
            <Input
              id="amount"
              type="number"
              step="0.01"
              value={state.discountAmount || ''}
              onChange={(e) =>
                dispatch({
                  type: 'UPDATE_FIELD',
                  field: 'discountAmount',
                  value: parseFloat(e.target.value) || null,
                })
              }
              className="mt-2 h-14 text-lg"
              placeholder="e.g., 5.00"
            />
          </div>
        )}
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/DealReviewStep.tsx">
// src/components/merchant/create-deal/DealReviewStep.tsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDealCreation } from '@/context/DealCreationContext';
import { OnboardingStepLayout } from '../onboarding/OnboardingStepLayout';
import { apiPost } from '@/services/api';
import { useToast } from '@/hooks/use-toast';
import { PATHS } from '@/routing/paths';

const ReviewItem = ({
  label,
  value,
}: {
  label: string;
  value: string | number | null | undefined;
}) => (
  <div className="flex justify-between border-b border-neutral-200 py-3">
    <p className="text-neutral-600">{label}</p>
    <p className="font-semibold text-neutral-800">{value || 'Not set'}</p>
  </div>
);

export const DealReviewStep = () => {
  const { state } = useDealCreation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isPublishing, setIsPublishing] = useState(false);

  const handlePublish = async () => {
    if (isPublishing) return; // Prevent double-clicks

    try {
      setIsPublishing(true);
      console.log('Starting deal publication...', state);

      // Validate required fields
      if (!state.startTime || !state.endTime) {
        toast({
          title: 'Error',
          description: 'Start time and end time are required.',
          variant: 'destructive',
        });
        return;
      }

      // 1. Prepare payload for the API
      const payload = {
        title: state.title,
        description: state.description,
        discountPercentage:
          state.dealType === 'percentage' ? state.discountPercentage : null,
        discountAmount:
          state.dealType === 'amount' ? state.discountAmount : null,
        startTime: new Date(state.startTime).toISOString(),
        endTime: new Date(state.endTime).toISOString(),
        redemptionInstructions: state.redemptionInstructions,
      };

      console.log('API Payload:', payload);

      // 2. Make the API call
      const response = await apiPost('/deals', payload);

      console.log('API Response:', response);

      // 3. Handle the response
      if (response.success) {
        toast({
          title: 'Deal Published!',
          description: 'Your new deal is now live for customers to see.',
        });
        navigate(PATHS.MERCHANT_DASHBOARD);
      } else {
        toast({
          title: 'Error Publishing Deal',
          description: response.error || 'Unknown error occurred',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Error in handlePublish:', error);
      toast({
        title: 'Error',
        description: 'Failed to publish deal. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsPublishing(false);
    }
  };

  return (
    <OnboardingStepLayout
      title="Ready to publish?"
      onNext={handlePublish}
      onBack={() => navigate(-1)}
      progress={100}
      isNextDisabled={isPublishing}
    >
      <div className="space-y-4">
        <p className="text-neutral-600">
          Review the details of your deal below. Once you publish, it will be
          visible to all CitySpark users.
        </p>
        <div className="rounded-lg border bg-white p-4">
          <ReviewItem label="Title" value={state.title} />
          <ReviewItem
            label="Offer"
            value={
              state.dealType === 'percentage'
                ? `${state.discountPercentage}% off`
                : `$${state.discountAmount} off`
            }
          />
          <ReviewItem
            label="Starts"
            value={new Date(state.startTime).toLocaleString()}
          />
          <ReviewItem
            label="Ends"
            value={new Date(state.endTime).toLocaleString()}
          />
        </div>
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/merchant/create-deal/index.ts">
// src/components/merchant/create-deal/index.ts
export { DealBasicsStep } from './DealBasicsStep';
export { DealOfferStep } from './DealOfferStep';
</file>

<file path="web/src/components/merchant/onboarding/OnboardingStepLayout.tsx">
// src/components/merchant/onboarding/OnboardingStepLayout.tsx
import type { ReactNode } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/common/Button';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';

interface Props {
  title: string;
  children: ReactNode;
  onNext: () => void;
  onBack: () => void;
  isNextDisabled?: boolean;
  isLoading?: boolean;
  progress: number; // e.g., 33 for 33%
}

export const OnboardingStepLayout = ({
  title,
  children,
  onNext,
  onBack,
  isNextDisabled,
  isLoading = false,
  progress,
}: Props) => {
  return (
    <div className="flex h-full min-h-[calc(100vh-5rem)] flex-col">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: 'easeOut' }}
        className="flex flex-grow items-center justify-center px-4 py-8"
      >
        <div className="w-full max-w-lg">
          <motion.h1
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            className="mb-8 text-center text-3xl font-bold text-neutral-800"
          >
            {title}
          </motion.h1>
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.5 }}
          >
            {children}
          </motion.div>
        </div>
      </motion.div>
      <footer className="sticky bottom-0 border-t border-neutral-200 bg-white shadow-lg">
        <div className="h-2 bg-neutral-200">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.8, ease: 'easeOut' }}
            className="h-2 bg-gradient-to-r from-brand-primary-400 to-brand-primary-600"
          />
        </div>
        <div className="container mx-auto flex h-20 max-w-screen-xl items-center justify-between px-6">
          <Button
            variant="secondary"
            onClick={onBack}
            className="rounded-lg px-6"
            disabled={isLoading}
          >
            Back
          </Button>
          <div className="flex items-center gap-4">
            <span className="text-sm font-medium text-neutral-600">
              {progress}% Complete
            </span>
            <Button
              onClick={onNext}
              disabled={isNextDisabled || isLoading}
              className="flex min-w-[100px] items-center justify-center gap-2 rounded-lg px-6"
            >
              {isLoading ? (
                <>
                  <LoadingSpinner size="sm" />
                  <span>Submitting...</span>
                </>
              ) : (
                'Next'
              )}
            </Button>
          </div>
        </div>
      </footer>
    </div>
  );
};
</file>

<file path="web/src/components/ui/button-variants.ts">
import { cva } from 'class-variance-authority';

export const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
        outline:
          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);
</file>

<file path="web/src/components/ui/form-context.ts">
import * as React from 'react';
import type { FieldPath, FieldValues } from 'react-hook-form';

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

export const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

type FormItemContextValue = {
  id: string;
};

export const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);
</file>

<file path="web/src/components/ui/separator.tsx">
import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="web/src/components/ui/use-form-field.ts">
import * as React from 'react';
import { FormFieldContext, FormItemContext } from './form-context';
import { useFormContext } from 'react-hook-form';

export const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};
</file>

<file path="web/src/context/auth-context-definition.ts">
import { createContext } from 'react';
import type {
  LoginFormValues,
  SignUpFormValues,
} from '@/lib/validationSchemas';
import type { ApiResponse } from '@/services/api';

interface User {
  id: number;
  email: string;
  name: string | null;
}

export interface AuthContextType {
  user: User | null | undefined;
  isLoadingUser: boolean;
  login: (
    credentials: LoginFormValues,
  ) => Promise<ApiResponse<{ token: string }>>;
  isLoggingIn: boolean;
  signup: (details: SignUpFormValues) => Promise<ApiResponse<unknown>>;
  isSigningUp: boolean;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextType | undefined>(
  undefined,
);
</file>

<file path="web/src/context/useAuth.ts">
import { useContext } from 'react';
import { AuthContext } from './auth-context-definition';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</file>

<file path="web/src/hooks/useCountdown.ts">
// src/hooks/useCountdown.ts
import { useEffect, useState } from 'react';

export const useCountdown = (targetDate: string) => {
  // Validate the target date
  const countDownDate = new Date(targetDate).getTime();
  const isValidDate = !isNaN(countDownDate);

  const [countDown, setCountDown] = useState(
    isValidDate ? Math.max(0, countDownDate - new Date().getTime()) : 0,
  );

  useEffect(() => {
    // If invalid date, don't set up interval
    if (!isValidDate) {
      return;
    }

    const interval = setInterval(() => {
      const newCountDown = Math.max(0, countDownDate - new Date().getTime());
      setCountDown(newCountDown);

      // Clear interval if countdown reaches zero
      if (newCountDown <= 0) {
        clearInterval(interval);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [countDownDate, isValidDate]);

  // If invalid date, return zeros
  if (!isValidDate) {
    return { days: 0, hours: 0, minutes: 0, seconds: 0 };
  }

  return getReturnValues(countDown);
};

const getReturnValues = (countDown: number) => {
  // Ensure countDown is not negative
  const safeCountDown = Math.max(0, countDown);

  const days = Math.floor(safeCountDown / (1000 * 60 * 60 * 24));
  const hours = Math.floor(
    (safeCountDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
  );
  const minutes = Math.floor((safeCountDown % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((safeCountDown % (1000 * 60)) / 1000);

  return { days, hours, minutes, seconds };
};
</file>

<file path="web/src/pages/merchant/MerchantOnboardingPage.tsx">
// src/pages/merchant/MerchantOnboardingPage.tsx
import { OnboardingProvider } from '@/context/MerchantOnboardingContext';
import { Routes, Route } from 'react-router-dom';
import { BusinessInfoStep } from '@/components/merchant/onboarding/BusinessInfoStep';

export const MerchantOnboardingPage = () => {
  return (
    <OnboardingProvider>
      {/* Here we can have nested routes for each step of the form */}
      <Routes>
        <Route index element={<BusinessInfoStep />} />
        {/* Add routes for Step 2, Step 3 etc. here */}
      </Routes>
    </OnboardingProvider>
  );
};
</file>

<file path="web/src/routing/ProtectedRoute.tsx">
// src/routing/ProtectedRoute.tsx
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '@/context/useAuth';
import { LoadingOverlay } from '@/components/ui/LoadingOverlay';
import { PATHS } from './paths';

export const ProtectedRoute = () => {
  const { user, isLoadingUser } = useAuth();

  if (isLoadingUser) {
    return <LoadingOverlay message="Verifying your account..." />;
  }

  return user ? <Outlet /> : <Navigate to={PATHS.LOGIN} replace />;
};
</file>

<file path="web/babel.config.js">
module.exports = {
  presets: [
    ['@babel/preset-env', { targets: { node: 'current' } }],
    '@babel/preset-react',
    '@babel/preset-typescript',
  ],
};
</file>

<file path="web/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/global.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="web/jest.setup.ts">
import '@testing-library/jest-dom';
</file>

<file path="web/src/components/common/SectionDivider.tsx">
export const SectionDivider = () => {
  return (
    <div className="bg-neutral-100/70">
      <div className="container mx-auto px-4">
        <div className="h-px w-full bg-neutral-200/80" />
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/BentoCard.tsx">
import { motion, type MotionProps } from 'framer-motion';
import { cn } from '@/lib/utils';

type BentoCardProps = {
  className?: string;
  children: React.ReactNode;
} & MotionProps;

export const BentoCard = ({
  className,
  children,
  ...props
}: BentoCardProps) => {
  return (
    <motion.div
      {...props}
      className={cn(
        'group relative flex flex-col justify-between overflow-hidden rounded-xl',
        'bg-white [box-shadow:0_0_0_1px_rgba(0,0,0,0.03),0_2px_4px_rgba(0,0,0,0.05),0_12px_24px_rgba(0,0,0,0.05)]',
        'dark:bg-black/40 dark:[box-shadow:0_0_0_1px_rgba(255,255,255,0.03),0_2px_4px_rgba(0,0,0,0.05),0_12px_24px_rgba(0,0,0,0.05)]',
        'transform-gpu transition-all duration-300 ease-in-out',
        'hover:shadow-2xl',
        className,
      )}
    >
      {children}
    </motion.div>
  );
};
</file>

<file path="web/src/components/landing/DealItem.tsx">
import { motion } from 'framer-motion';
import { Zap, Utensils, Coffee } from 'lucide-react';

interface DealItemProps {
  deal: {
    id: number;
    name: string;
    business: string;
    distance: string;
    position: L.LatLngExpression;
    category: string;
  };
  isHovered: boolean;
  onMouseEnter: (id: number) => void;
  onMouseLeave: () => void;
}

export const DealItem = ({
  deal,
  isHovered,
  onMouseEnter,
  onMouseLeave,
}: DealItemProps) => {
  return (
    <motion.div
      onMouseEnter={() => onMouseEnter(deal.id)}
      onMouseLeave={onMouseLeave}
      whileHover={{ scale: 1.02, x: 5 }}
      transition={{ type: 'spring', stiffness: 300, damping: 20 }}
      className={`flex cursor-pointer items-center gap-3 rounded-xl border p-2 transition-all duration-200 sm:gap-4 sm:p-3 ${isHovered ? 'border-brand-primary-200/80 bg-white/90 shadow-lg ring-1 ring-brand-primary-400/20 backdrop-blur-sm' : 'border-brand-primary-100/50 bg-white/60 backdrop-blur-sm'}`}
    >
      <div
        className={`flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-lg sm:h-14 sm:w-14 ${deal.category === 'Food' ? 'from-accent-orange-100 to-accent-orange-200 bg-gradient-to-br' : 'bg-gradient-to-br from-cyan-100 to-brand-primary-200'}`}
      >
        {deal.category === 'Food' ? (
          <Utensils className="text-accent-orange-600 h-6 w-6 sm:h-7 sm:w-7" />
        ) : (
          <Coffee className="h-6 w-6 text-brand-primary-600 sm:h-7 sm:w-7" />
        )}
      </div>
      <div className="flex-grow">
        <p className="text-neutral-text-primary text-sm font-semibold leading-tight sm:text-base">
          {deal.name}
        </p>
        <p className="text-neutral-text-secondary text-xs sm:text-sm">
          {deal.business}
        </p>
      </div>
      <div className="flex-shrink-0 text-right">
        <div className="flex items-center justify-end gap-1 text-xs font-bold text-green-600 sm:text-sm">
          <Zap className="h-3 w-3 sm:h-4 sm:w-4" />
          <span>LIVE</span>
        </div>
        <p className="text-xs text-neutral-500 sm:text-sm">{deal.distance}</p>
      </div>
    </motion.div>
  );
};
</file>

<file path="web/src/components/landing/DealList.tsx">
import { Search } from 'lucide-react';
import { DealItem } from './DealItem';

interface DealListProps {
  deals: Array<{
    id: number;
    name: string;
    business: string;
    distance: string;
    position: L.LatLngExpression;
    category: string;
  }>;
  hoveredDealId: number | null;
  setHoveredDealId: (id: number | null) => void;
}

export const DealList = ({
  deals,
  hoveredDealId,
  setHoveredDealId,
}: DealListProps) => {
  return (
    <div className="flex h-full w-full flex-col bg-gradient-to-br from-brand-primary-50/50 via-white to-cyan-50/30 p-3 sm:w-1/2 sm:p-6">
      <div>
        <h3 className="text-neutral-text-primary text-lg font-semibold sm:text-xl">
          Live Deals Near You
        </h3>
        <div className="relative mt-3 sm:mt-4">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-brand-primary-400 sm:h-5 sm:w-5" />
          <input
            type="text"
            placeholder="Search deals, places..."
            className="w-full rounded-lg border border-brand-primary-200/60 bg-white/80 py-2 pl-9 pr-4 text-sm outline-none backdrop-blur-sm transition focus:border-brand-primary-400 focus:ring-2 focus:ring-brand-primary-400/50 sm:pl-10 sm:text-base"
          />
        </div>
        <div className="mt-3 flex items-center gap-2 sm:mt-4">
          <button className="rounded-full bg-gradient-to-r from-brand-primary-400 to-brand-primary-600 px-3 py-1 text-xs text-white shadow-sm transition-all hover:shadow-md sm:text-sm">
            All
          </button>
          <button className="rounded-full border border-brand-primary-200/60 bg-white/70 px-3 py-1 text-xs text-brand-primary-600 backdrop-blur-sm transition-all hover:border-brand-primary-300 hover:bg-brand-primary-50 sm:text-sm">
            Food
          </button>
          <button className="rounded-full border border-brand-primary-200/60 bg-white/70 px-3 py-1 text-xs text-brand-primary-600 backdrop-blur-sm transition-all hover:border-brand-primary-300 hover:bg-brand-primary-50 sm:text-sm">
            Drinks
          </button>
        </div>
      </div>

      <div className="-mr-2 mt-3 flex-grow space-y-2 overflow-y-auto pr-1 sm:mt-4 sm:space-y-3">
        {deals.map((deal) => (
          <DealItem
            key={deal.id}
            deal={deal}
            isHovered={hoveredDealId === deal.id}
            onMouseEnter={setHoveredDealId}
            onMouseLeave={() => setHoveredDealId(null)}
          />
        ))}
      </div>

      <div className="mt-3 flex-shrink-0 sm:mt-4">
        <button className="w-full rounded-lg bg-brand-primary-light py-2 text-center text-sm font-semibold text-brand-primary-main transition-all duration-300 hover:bg-brand-primary-main hover:text-white">
          See all deals
        </button>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/DynamicHeadline.tsx">
import { useState, useEffect } from 'react';

export const DynamicHeadline = () => {
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const dynamicWords = ['Moments', 'Deals', 'Finds', 'Nights Out'];

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentWordIndex((prev) => (prev + 1) % dynamicWords.length);
    }, 2000);

    return () => clearInterval(interval);
  }, [dynamicWords.length]);

  return (
    <h1 className="text-neutral-text-primary text-4xl font-semibold leading-tight tracking-tight sm:text-5xl md:text-6xl">
      CitySpark gets you exclusive local{' '}
      <span className="text-neutral-text-primary mt-2 inline-flex flex-wrap items-center justify-center gap-2 transition-all duration-500 ease-in-out sm:gap-3">
        <span className="flex items-center justify-center gap-2 sm:gap-3">
          <svg
            className="h-8 w-8 text-brand-primary-400 sm:h-12 sm:w-12"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path d="M12 2L13.09 8.26L19 7L14.74 12L19 17L13.09 15.74L12 22L10.91 15.74L5 17L9.26 12L5 7L10.91 8.26L12 2Z" />
          </svg>
          {dynamicWords[currentWordIndex]}
        </span>
      </span>
    </h1>
  );
};
</file>

<file path="web/src/components/landing/HeroBackground.tsx">
export const HeroBackground = () => {
  return (
    <div className="pointer-events-none absolute inset-0">
      <div className="absolute bottom-0 left-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
      <div className="absolute bottom-0 right-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
      <div className="absolute left-0 right-0 top-[4%] h-0.5 bg-brand-primary-200/40 md:top-[5%]"></div>
      <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-brand-primary-200/40"></div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/HomepageContentGrid.tsx">
import { bookTonightDeals, experiencesData } from '@/data/deals';
import { CarouselCard } from './CarouselCard';
import { motion } from 'framer-motion';

interface HomepageContentGridProps {
  activeTab: string;
}

export const HomepageContentGrid = ({
  activeTab,
}: HomepageContentGridProps) => {
  const content = activeTab === 'deals' ? bookTonightDeals : experiencesData;
  const title =
    activeTab === 'deals' ? 'Popular Homes in your Area' : 'Airbnb Originals';

  return (
    <section className="bg-white py-12">
      <div className="container mx-auto px-4">
        <h2 className="mb-6 text-3xl font-bold text-neutral-800">{title}</h2>
        <motion.div
          key={activeTab} // This key is crucial for the re-render animation
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="grid grid-cols-2 gap-6 md:grid-cols-4 lg:grid-cols-6"
        >
          {content.slice(0, 12).map(
            (
              item, // Show up to 12 items (2 rows)
            ) => (
              <CarouselCard key={item.id} deal={item} />
            ),
          )}
        </motion.div>
      </div>
    </section>
  );
};
</file>

<file path="web/src/components/landing/LiveMapCard.tsx">
import { Map } from 'lucide-react';

export const LiveMapCard = () => (
  <div className="relative flex h-full w-full flex-col items-start justify-end gap-2 p-6">
    <div className="absolute inset-0 bg-gradient-to-br from-brand-primary-900 to-gray-900" />
    <Map className="absolute right-4 top-4 h-8 w-8 text-white/30" />
    <div className="bg-accent-urgent absolute left-1/4 top-1/4 h-2 w-2 animate-ping rounded-full" />
    <div className="bg-accent-secondary absolute left-1/3 top-2/3 h-1 w-1 animate-ping rounded-full" />
    <div className="bg-accent-gamification absolute bottom-1/4 right-1/4 h-1.5 w-1.5 animate-ping rounded-full" />
    <h3 className="text-2xl font-semibold text-white">Your City, Live.</h3>
    <p className="max-w-xs text-sm text-white/80">
      See a real-time view of every deal, happy hour, and secret offer around
      you.
    </p>
  </div>
);
</file>

<file path="web/src/components/layout/MerchantLayout.tsx">
// src/components/layout/MerchantLayout.tsx
import { Outlet } from 'react-router-dom';
import { MerchantHeader } from './MerchantHeader'; // <-- THE FIX

export const MerchantLayout = () => {
  return (
    <div className="flex min-h-screen flex-col bg-neutral-50">
      <MerchantHeader /> {/* <-- THE FIX */}
      <main className="flex-grow">
        <Outlet />
      </main>
      {/* Optionally add a simple merchant footer here */}
    </div>
  );
};
</file>

<file path="web/src/components/merchant/onboarding/BusinessInfoStep.tsx">
// src/components/merchant/onboarding/BusinessInfoStep.tsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useOnboarding } from '@/context/MerchantOnboardingContext';
import { OnboardingStepLayout } from './OnboardingStepLayout';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { apiPost } from '@/services/api';
import { useToast } from '@/hooks/use-toast';
import { PATHS } from '@/routing/paths';

export const BusinessInfoStep = () => {
  const { state, dispatch } = useOnboarding();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleNext = async () => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    try {
      const response = await apiPost('/merchants/register', {
        businessName: state.businessName,
        address: state.address,
        description: 'Default description', // Add these to your form later
        logoUrl: '',
      });

      if (response.success) {
        toast({
          title: 'Application Submitted!',
          description: 'Your merchant profile is now pending approval.',
          duration: 5000,
        });
        navigate(PATHS.MERCHANT_DASHBOARD);
      } else {
        toast({
          title: 'Error',
          description:
            response.error || 'Something went wrong. Please try again.',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Network error:', error);
      toast({
        title: 'Network Error',
        description: 'Please check your connection and try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <OnboardingStepLayout
      title="First, let's get your business on the map"
      onNext={handleNext}
      onBack={() => navigate(PATHS.HOME)}
      isNextDisabled={!state.businessName || !state.address}
      isLoading={isSubmitting}
      progress={50}
    >
      <div className="space-y-6">
        <div>
          <Label htmlFor="businessName" className="text-lg font-semibold">
            Business Name
          </Label>
          <p className="mb-2 text-neutral-500">
            This will be your public name on CitySpark.
          </p>
          <Input
            id="businessName"
            value={state.businessName}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'businessName',
                value: e.target.value,
              })
            }
            className="h-14 text-lg"
            disabled={isSubmitting}
          />
        </div>
        <div>
          <Label htmlFor="address" className="text-lg font-semibold">
            Business Address
          </Label>
          <p className="mb-2 text-neutral-500">
            This helps users find you on the map.
          </p>
          <Input
            id="address"
            value={state.address}
            onChange={(e) =>
              dispatch({
                type: 'UPDATE_FIELD',
                field: 'address',
                value: e.target.value,
              })
            }
            className="h-14 text-lg"
            disabled={isSubmitting}
          />
        </div>
      </div>
    </OnboardingStepLayout>
  );
};
</file>

<file path="web/src/components/ui/avatar.tsx">
import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="web/src/components/ui/button.tsx">
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { buttonVariants } from './button-variants';

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = 'Button';

export { Button };
</file>

<file path="web/src/components/ui/dropdown-menu.tsx">
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
      inset && 'pl-8',
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] origin-[--radix-dropdown-menu-content-transform-origin] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
        'origin-[--radix-dropdown-menu-content-transform-origin] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="h3.5 absolute left-2 flex w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="h3.5 absolute left-2 flex w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="web/src/components/ui/form.tsx">
import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  FormProvider,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';
import { useFormField } from './use-form-field';
import { FormFieldContext, FormItemContext } from './form-context';

const Form = FormProvider;

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = 'FormItem';

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = 'FormLabel';

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = 'FormControl';

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-[0.8rem] text-muted-foreground', className)}
      {...props}
    />
  );
});
FormDescription.displayName = 'FormDescription';

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? '') : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-[0.8rem] font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = 'FormMessage';

export {
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="web/src/components/ui/input.tsx">
import * as React from 'react';

import { cn } from '@/lib/utils';

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<'input'>>(
  ({ className, type, ...props }, ref) => (
    <input
      type={type}
      className={cn(
        'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className,
      )}
      ref={ref}
      {...props}
    />
  ),
);
Input.displayName = 'Input';

export { Input };
</file>

<file path="web/src/components/ui/label.tsx">
import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="web/src/components/ui/toast.tsx">
import * as React from 'react';
import * as ToastPrimitives from '@radix-ui/react-toast';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';

import { cn } from '@/lib/utils';

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => (
  <ToastPrimitives.Root
    ref={ref}
    className={cn(toastVariants({ variant }), className)}
    {...props}
  />
));
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold [&+div]:text-xs', className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="web/src/components/ui/toaster.tsx">
import { useToast, type ToasterToast } from '@/hooks/use-toast';
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast';

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({
        id,
        title,
        description,
        action,
        ...props
      }: ToasterToast) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="web/src/context/DealCreationContext.tsx">
// src/context/DealCreationContext.tsx
/* eslint-disable react-refresh/only-export-components */
import { createContext, useContext, useReducer } from 'react';
import type { ReactNode } from 'react';

interface State {
  title: string;
  description: string;
  dealType: 'percentage' | 'amount' | null;
  discountPercentage: number | null;
  discountAmount: number | null;
  startTime: string;
  endTime: string;
  redemptionInstructions: string;
}

type Action =
  | { type: 'UPDATE_FIELD'; field: keyof State; value: string | number | null }
  | { type: 'SET_DEAL_TYPE'; dealType: 'percentage' | 'amount' };

const initialState: State = {
  title: '',
  description: '',
  dealType: null,
  discountPercentage: null,
  discountAmount: null,
  startTime: '',
  endTime: '',
  redemptionInstructions:
    'Show this screen at the counter to redeem your deal.',
};

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case 'UPDATE_FIELD':
      return { ...state, [action.field]: action.value };
    case 'SET_DEAL_TYPE':
      return {
        ...state,
        dealType: action.dealType,
        // Reset the other value to ensure data integrity
        discountPercentage:
          action.dealType === 'amount' ? null : state.discountPercentage,
        discountAmount:
          action.dealType === 'percentage' ? null : state.discountAmount,
      };
    default:
      return state;
  }
}

const DealCreationContext = createContext<{
  state: State;
  dispatch: React.Dispatch<Action>;
}>({ state: initialState, dispatch: () => null });

export const DealCreationProvider = ({ children }: { children: ReactNode }) => {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <DealCreationContext.Provider value={{ state, dispatch }}>
      {children}
    </DealCreationContext.Provider>
  );
};

export const useDealCreation = () => useContext(DealCreationContext);
</file>

<file path="web/src/context/MerchantOnboardingContext.tsx">
// src/context/MerchantOnboardingContext.tsx
/* eslint-disable react-refresh/only-export-components */
import { createContext, useContext, useReducer } from 'react';
import type { ReactNode } from 'react';

interface State {
  businessName: string;
  address: string;
  description: string;
  logoUrl: string;
}

type Action = { type: 'UPDATE_FIELD'; field: keyof State; value: string };

const initialState: State = {
  businessName: '',
  address: '',
  description: '',
  logoUrl: '',
};

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case 'UPDATE_FIELD':
      return { ...state, [action.field]: action.value };
    default:
      return state;
  }
}

const OnboardingContext = createContext<{
  state: State;
  dispatch: React.Dispatch<Action>;
}>({ state: initialState, dispatch: () => null });

export const OnboardingProvider = ({ children }: { children: ReactNode }) => {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <OnboardingContext.Provider value={{ state, dispatch }}>
      {children}
    </OnboardingContext.Provider>
  );
};

export const useOnboarding = () => useContext(OnboardingContext);
</file>

<file path="web/src/hooks/use-toast.ts">
import * as React from 'react';

import type { ToastActionElement, ToastProps } from '@/components/ui/toast';

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

export type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType['ADD_TOAST'];
      toast: ToasterToast;
    }
  | {
      type: ActionType['UPDATE_TOAST'];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType['DISMISS_TOAST'];
      toastId?: ToasterToast['id'];
    }
  | {
      type: ActionType['REMOVE_TOAST'];
      toastId?: ToasterToast['id'];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case 'DISMISS_TOAST': {
      const { toastId } = action;

      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    });
  const dismiss = () =>
    dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

export function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) =>
      dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  };
}
</file>

<file path="web/src/lib/validationSchemas.ts">
import * as z from 'zod';

export const loginSchema = z.object({
  email: z.string().email({ message: 'Please enter a valid email address.' }),
  password: z.string().min(1, { message: 'Password cannot be empty.' }),
});

export const signUpSchema = z
  .object({
    firstName: z
      .string()
      .min(2, { message: 'First name must be at least 2 characters.' }),
    lastName: z
      .string()
      .min(2, { message: 'Last name must be at least 2 characters.' }),
    email: z.string().email({ message: 'Please enter a valid email address.' }),
    phone: z
      .string()
      .min(10, { message: 'Please enter a valid 10-digit phone number.' })
      .max(15),
    password: z
      .string()
      .min(8, { message: 'Password must be at least 8 characters.' })
      .regex(/[A-Z]/, {
        message: 'Must contain at least one uppercase letter.',
      })
      .regex(/[a-z]/, {
        message: 'Must contain at least one lowercase letter.',
      })
      .regex(/[0-9]/, { message: 'Must contain at least one number.' })
      .regex(/[^A-Za-z0-9]/, {
        message: 'Must contain at least one special character.',
      }),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match.",
    path: ['confirmPassword'],
  });

export type LoginFormValues = z.infer<typeof loginSchema>;
export type SignUpFormValues = z.infer<typeof signUpSchema>;
</file>

<file path="web/src/pages/merchant/DealCreatePage.tsx">
// src/pages/merchant/CreateDealPage.tsx
import { Routes, Route } from 'react-router-dom';
import { DealCreationProvider } from '@/context/DealCreationContext';
import { DealBasicsStep } from '@/components/merchant/create-deal/DealBasicsStep';
import { DealOfferStep } from '@/components/merchant/create-deal/DealOfferStep';
import { DealScheduleStep } from '@/components/merchant/create-deal/DealScheduleStep';
import { DealInstructionsStep } from '@/components/merchant/create-deal/DealInstructionsStep';
import { DealReviewStep } from '@/components/merchant/create-deal/DealReviewStep';

export const CreateDealPage = () => {
  return (
    <DealCreationProvider>
      <Routes>
        <Route index element={<DealBasicsStep />} />
        <Route path="offer" element={<DealOfferStep />} />
        <Route path="schedule" element={<DealScheduleStep />} />
        <Route path="instructions" element={<DealInstructionsStep />} />
        <Route path="review" element={<DealReviewStep />} />
      </Routes>
    </DealCreationProvider>
  );
};
</file>

<file path="web/src/pages/merchant/MerchantDashboardPage.tsx">
// src/pages/merchant/MerchantDashboardPage.tsx
import { Button } from '@/components/common/Button';
import { Link } from 'react-router-dom';
import { PATHS } from '@/routing/paths';
import { useQuery } from '@tanstack/react-query';
import { apiGet } from '@/services/api';
import { CalendarIcon, ClockIcon, PercentIcon } from 'lucide-react';
import { useMerchantStatus } from '@/hooks/useMerchantStatus';

interface Deal {
  id: string;
  title: string;
  description: string;
  discountPercentage: number | null;
  discountAmount: number | null;
  startTime: string;
  endTime: string;
  redemptionInstructions: string;
  createdAt: string;
  merchant: {
    businessName: string;
    address: string;
  };
}

const DealCard = ({ deal }: { deal: Deal }) => {
  const isActive =
    new Date() >= new Date(deal.startTime) &&
    new Date() <= new Date(deal.endTime);
  const isExpired = new Date() > new Date(deal.endTime);

  return (
    <div className="rounded-lg border border-neutral-200 bg-white p-6 shadow-sm transition-shadow hover:shadow-md">
      <div className="mb-4 flex items-start justify-between">
        <h3 className="text-xl font-semibold text-neutral-800">{deal.title}</h3>
        <span
          className={`rounded-full px-3 py-1 text-sm font-medium ${
            isActive
              ? 'bg-green-100 text-green-800'
              : isExpired
                ? 'bg-red-100 text-red-800'
                : 'bg-amber-100 text-amber-800'
          }`}
        >
          {isActive ? 'Active' : isExpired ? 'Expired' : 'Scheduled'}
        </span>
      </div>

      <p className="mb-4 text-neutral-600">{deal.description}</p>

      <div className="space-y-3">
        <div className="flex items-center gap-2">
          <PercentIcon className="h-4 w-4 text-brand-primary-600" />
          <span className="font-medium">
            {deal.discountPercentage
              ? `${deal.discountPercentage}% OFF`
              : `$${deal.discountAmount} OFF`}
          </span>
        </div>

        <div className="flex items-center gap-2">
          <CalendarIcon className="h-4 w-4 text-neutral-500" />
          <span className="text-sm text-neutral-600">
            {new Date(deal.startTime).toLocaleDateString()} -{' '}
            {new Date(deal.endTime).toLocaleDateString()}
          </span>
        </div>

        <div className="flex items-center gap-2">
          <ClockIcon className="h-4 w-4 text-neutral-500" />
          <span className="text-sm text-neutral-600">
            Created {new Date(deal.createdAt).toLocaleDateString()}
          </span>
        </div>
      </div>

      <div className="mt-4 border-t border-neutral-100 pt-4">
        <p className="text-sm text-neutral-500">
          <strong>Redemption:</strong> {deal.redemptionInstructions}
        </p>
      </div>
    </div>
  );
};

const DealsSkeleton = () => (
  <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <div
        key={i}
        className="animate-pulse rounded-lg border border-neutral-200 bg-white p-6"
      >
        <div className="mb-4 h-6 w-3/4 rounded bg-neutral-200" />
        <div className="mb-2 h-4 w-full rounded bg-neutral-200" />
        <div className="mb-4 h-4 w-2/3 rounded bg-neutral-200" />
        <div className="space-y-2">
          <div className="h-4 w-1/2 rounded bg-neutral-200" />
          <div className="h-4 w-2/3 rounded bg-neutral-200" />
          <div className="h-4 w-1/3 rounded bg-neutral-200" />
        </div>
      </div>
    ))}
  </div>
);

export const MerchantDashboardPage = () => {
  // Fetch merchant status from API
  const { data: merchantData, isLoading: merchantLoading } =
    useMerchantStatus();
  const merchantStatus = merchantData?.data?.merchant?.status;
  // Fetch merchant's deals (hook must run unconditionally; use `enabled` to control network call)
  const {
    data: dealsData,
    isLoading: dealsLoading,
    error: dealsError,
  } = useQuery({
    queryKey: ['merchant-deals'],
    queryFn: () => apiGet<{ deals: Deal[] }>('/merchants/deals'),
    enabled: !!merchantStatus && merchantStatus === 'APPROVED', // Only fetch if we have status and it's approved
  });

  // Show loading state while fetching merchant status
  if (merchantLoading) {
    return (
      <div className="container mx-auto max-w-7xl px-4 py-12">
        <div className="animate-pulse">
          <div className="mb-8 h-8 w-64 rounded bg-neutral-200" />
          <div className="mb-8 grid grid-cols-1 gap-6 md:grid-cols-4">
            {Array.from({ length: 4 }).map((_, i) => (
              <div key={i} className="h-24 rounded bg-neutral-200" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  // If no merchant status, they're not a merchant yet
  if (!merchantStatus) {
    return (
      <div className="container mx-auto max-w-4xl px-4 py-12">
        <div className="text-center">
          <h1 className="mb-4 text-4xl font-bold">Join as a Merchant</h1>
          <p className="mb-8 text-neutral-600">
            Start creating deals and reach new customers
          </p>
          <Link to={PATHS.MERCHANT_ONBOARDING}>
            <Button size="lg">Become a Merchant</Button>
          </Link>
        </div>
      </div>
    );
  }

  const deals = dealsData?.data?.deals || [];
  const isLoading = dealsLoading;
  const error = dealsError;

  return (
    <div className="container mx-auto max-w-7xl px-4 py-12">
      <div className="mb-8 flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold">Your Dashboard</h1>
          <p className="mt-2 text-neutral-600">
            Manage your deals and track performance
          </p>
        </div>
        {merchantStatus === 'APPROVED' && (
          <Link to={PATHS.MERCHANT_DEALS_CREATE}>
            <Button size="lg" className="rounded-lg">
              Create New Deal
            </Button>
          </Link>
        )}
      </div>

      {merchantStatus === 'PENDING' && (
        <div className="rounded-lg border border-amber-200 bg-amber-100 p-6">
          <h2 className="text-xl font-bold text-amber-800">
            Application Pending
          </h2>
          <p className="mt-2 text-amber-700">
            Your application to become a merchant is currently under review.
            We'll notify you via email once it's approved. This usually takes
            1-2 business days.
          </p>
        </div>
      )}

      {merchantStatus === 'APPROVED' && (
        <>
          {/* Quick Stats */}
          <div className="mb-8 grid grid-cols-1 gap-6 md:grid-cols-4">
            <div className="rounded-lg border border-neutral-200 bg-white p-6">
              <h3 className="text-sm font-medium text-neutral-500">
                Total Deals
              </h3>
              <p className="text-3xl font-bold text-neutral-800">
                {deals.length}
              </p>
            </div>
            <div className="rounded-lg border border-neutral-200 bg-white p-6">
              <h3 className="text-sm font-medium text-neutral-500">
                Active Deals
              </h3>
              <p className="text-3xl font-bold text-green-600">
                {
                  deals.filter((deal) => {
                    const now = new Date();
                    return (
                      now >= new Date(deal.startTime) &&
                      now <= new Date(deal.endTime)
                    );
                  }).length
                }
              </p>
            </div>
            <div className="rounded-lg border border-neutral-200 bg-white p-6">
              <h3 className="text-sm font-medium text-neutral-500">
                Scheduled
              </h3>
              <p className="text-3xl font-bold text-amber-600">
                {
                  deals.filter((deal) => new Date() < new Date(deal.startTime))
                    .length
                }
              </p>
            </div>
            <div className="rounded-lg border border-neutral-200 bg-white p-6">
              <h3 className="text-sm font-medium text-neutral-500">Expired</h3>
              <p className="text-3xl font-bold text-red-600">
                {
                  deals.filter((deal) => new Date() > new Date(deal.endTime))
                    .length
                }
              </p>
            </div>
          </div>

          {/* Deals Section */}
          <div className="mb-6">
            <h2 className="mb-4 text-2xl font-bold">Your Deals</h2>

            {isLoading ? (
              <DealsSkeleton />
            ) : error ? (
              <div className="rounded-lg border border-red-200 bg-red-100 p-6">
                <p className="text-red-800">
                  Error loading deals. Please try again later.
                </p>
              </div>
            ) : deals.length === 0 ? (
              <div className="rounded-lg border border-neutral-200 bg-white py-12 text-center">
                <h3 className="mb-2 text-xl font-semibold text-neutral-800">
                  No deals yet
                </h3>
                <p className="mb-6 text-neutral-600">
                  Create your first deal to start attracting customers
                </p>
                <Link to={PATHS.MERCHANT_DEALS_CREATE}>
                  <Button>Create Your First Deal</Button>
                </Link>
              </div>
            ) : (
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {deals.map((deal) => (
                  <DealCard key={deal.id} deal={deal} />
                ))}
              </div>
            )}
          </div>
        </>
      )}

      {merchantStatus === 'REJECTED' && (
        <div className="rounded-lg border border-red-200 bg-red-100 p-6">
          <h2 className="text-xl font-bold text-red-800">
            Application Not Approved
          </h2>
          <p className="mt-2 text-red-700">
            Unfortunately, your merchant application was not approved at this
            time. Please contact our support team if you have any questions or
            would like to reapply.
          </p>
          <div className="mt-4 space-x-3">
            <Link to="/contact">
              <Button variant="secondary">Contact Support</Button>
            </Link>
            <Link to={PATHS.MERCHANT_ONBOARDING}>
              <Button>Reapply</Button>
            </Link>
          </div>
        </div>
      )}
    </div>
  );
};
</file>

<file path="web/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="web/eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';
import { globalIgnores } from 'eslint/config';

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
]);
</file>

<file path="web/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CitySpark</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="web/jest.config.js">
export default {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
};
</file>

<file path="web/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="web/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,
    "types": ["node"],

    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="web/src/components/common/Pagination.tsx">
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { Button } from './Button';

export const Pagination = () => {
  return (
    <nav className="flex items-center justify-center space-x-2 py-6">
      <Button
        variant="ghost"
        size="sm"
        disabled
        className="h-9 w-9 rounded-xl p-0"
      >
        <ChevronLeft className="h-4 w-4" />
      </Button>
      <Button
        size="sm"
        className="h-9 w-9 rounded-xl p-0 text-sm font-semibold"
      >
        1
      </Button>
      <Button
        variant="secondary"
        size="sm"
        className="h-9 w-9 rounded-xl p-0 text-sm font-semibold"
      >
        2
      </Button>
      <Button variant="ghost" size="sm" className="h-9 w-9 rounded-xl p-0">
        <ChevronRight className="h-4 w-4" />
      </Button>
    </nav>
  );
};
</file>

<file path="web/src/components/deals/DealCardV2.tsx">
import { motion } from 'framer-motion';
import { Star } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { DealWithLocation } from '@/data/deals';

interface DealCardV2Props {
  deal: DealWithLocation;
  isHovered: boolean;
  onMouseEnter: (id: string) => void;
  onMouseLeave: () => void;
}

export const DealCardV2 = ({
  deal,
  isHovered,
  onMouseEnter,
  onMouseLeave,
}: DealCardV2Props) => {
  const isOpen = deal.bookingInfo.toLowerCase().includes('sorry'); // Simple logic for status

  return (
    <motion.div
      onMouseEnter={() => onMouseEnter(deal.id)}
      onMouseLeave={onMouseLeave}
      className={cn(
        'cursor-pointer overflow-hidden rounded-2xl border border-neutral-200 transition-all duration-300',
        'bg-white hover:-translate-y-1 hover:border-primary/20 hover:shadow-xl hover:shadow-primary/5',
        isHovered
          ? '-translate-y-1 border-primary/30 shadow-xl shadow-primary/10'
          : 'shadow-sm',
      )}
    >
      <div className="relative overflow-hidden">
        <img
          src={deal.image}
          alt={deal.name}
          className="h-32 w-full object-cover transition-transform duration-300 hover:scale-105 sm:h-36 md:h-40"
        />
        <div className="absolute right-2 top-2 sm:right-3 sm:top-3">
          <div
            className={cn(
              'rounded-full px-1.5 py-0.5 text-xs font-semibold backdrop-blur-sm sm:px-2 sm:py-1',
              isOpen
                ? 'border border-green-200 bg-green-500/20 text-green-700'
                : 'border border-red-200 bg-red-500/20 text-red-700',
            )}
          >
            {isOpen ? 'Open' : 'Closed'}
          </div>
        </div>
      </div>
      <div className="p-3 sm:p-4">
        <div className="mb-1.5 flex items-start justify-between sm:mb-2">
          <h3 className="pr-2 text-base font-bold leading-tight text-neutral-800 sm:text-lg">
            {deal.name}
          </h3>
          <div className="flex flex-shrink-0 items-center gap-1 rounded-lg border border-amber-200 bg-amber-50 px-1.5 py-0.5 sm:px-2 sm:py-1">
            <Star className="h-3 w-3 fill-current text-amber-500 sm:h-4 sm:w-4" />
            <span className="text-xs font-semibold text-amber-700 sm:text-sm">
              {deal.rating}
            </span>
          </div>
        </div>
        <p className="text-xs font-medium text-neutral-600 sm:text-sm">
          {deal.category}
        </p>
        <p className="mt-1 text-xs text-neutral-500">{deal.location}</p>

        {/* Deal highlight section */}
        <div className="mt-2.5 border-t border-neutral-100 pt-2.5 sm:mt-3 sm:pt-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-1.5 sm:gap-2">
              <div className="h-1.5 w-1.5 animate-pulse rounded-full bg-green-500 sm:h-2 sm:w-2"></div>
              <span className="text-xs font-semibold text-green-700 sm:text-sm">
                Deal Available
              </span>
            </div>
            <span className="text-sm font-bold text-sky-600">{deal.price}</span>
          </div>
        </div>
      </div>
    </motion.div>
  );
};
</file>

<file path="web/src/components/landing/FeatureCard.tsx">
import { Gift, Users, Zap } from 'lucide-react';

interface FeatureCardProps {
  icon: 'gift' | 'users' | 'zap';
  title: string;
}

const IconComponent = ({ icon }: { icon: 'gift' | 'users' | 'zap' }) => {
  switch (icon) {
    case 'gift':
      return <Gift className="text-neutral-text-primary h-6 w-6" />;
    case 'users':
      return <Users className="text-neutral-text-primary h-6 w-6" />;
    case 'zap':
      return <Zap className="text-neutral-text-primary h-6 w-6" />;
    default:
      return null;
  }
};

export const FeatureCard = ({ icon, title }: FeatureCardProps) => {
  return (
    <div className="flex h-full flex-col justify-between p-4 sm:p-6">
      <IconComponent icon={icon} />
      <h3 className="text-neutral-text-primary text-sm font-semibold sm:text-base">
        {title}
      </h3>
    </div>
  );
};
</file>

<file path="web/src/components/landing/HeroIllustration.tsx">
import { Utensils, Coffee, ShoppingBag, Ticket } from 'lucide-react';

export const HeroIllustration = () => {
  return (
    <div className="relative mx-auto mt-12 w-full max-w-5xl">
      <div
        className="aspect-[16/9] w-full rounded-lg bg-gray-900/5 p-2"
        style={{
          background:
            'radial-gradient(circle at 50% 30%, var(--brand-primary-100), transparent 70%)',
        }}
      >
        <div className="border-neutral-border/20 h-full w-full rounded-md border bg-white/50 p-4 shadow-inner">
          <svg
            viewBox="0 0 800 450"
            xmlns="http://www.w3.org/2000/svg"
            className="h-full w-full"
          >
            <defs>
              <radialGradient
                id="glow"
                cx="50%"
                cy="50%"
                r="50%"
                fx="50%"
                fy="50%"
              >
                <stop
                  offset="0%"
                  stopColor="var(--accent-secondary-main)"
                  stopOpacity="0.6"
                />
                <stop
                  offset="100%"
                  stopColor="var(--accent-secondary-main)"
                  stopOpacity="0"
                />
              </radialGradient>
              <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur in="SourceAlpha" stdDeviation="3" />
                <feOffset dx="0" dy="2" result="offsetblur" />
                <feComponentTransfer>
                  <feFuncA type="linear" slope="0.5" />
                </feComponentTransfer>
                <feMerge>
                  <feMergeNode />
                  <feMergeNode in="SourceGraphic" />
                </feMerge>
              </filter>
            </defs>

            <path
              d="M0 450 L0 380 L50 350 L80 380 L120 340 L150 390 L200 350 L250 400 L300 360 L320 380 L350 330 L400 380 L450 320 L500 390 L550 350 L600 410 L650 360 L700 390 L750 340 L800 380 L800 450 Z"
              fill="#E0E6E8"
              opacity="0.6"
            />
            <path
              d="M0 450 L0 400 L40 380 L90 410 L130 380 L180 420 L220 390 L280 430 L310 400 L360 420 L420 380 L480 410 L530 370 L580 400 L640 360 L690 400 L740 370 L800 390 L800 450 Z"
              fill="#F4F7F9"
              opacity="0.8"
            />

            <path
              d="M 200 150 Q 300 250 400 200"
              stroke="var(--brand-primary-main)"
              strokeWidth="2"
              fill="none"
              strokeDasharray="5 5"
              opacity="0.5"
            />
            <path
              d="M 400 200 Q 480 120 600 180"
              stroke="var(--brand-primary-main)"
              strokeWidth="2"
              fill="none"
              strokeDasharray="5 5"
              opacity="0.5"
            />
            <path
              d="M 200 150 Q 350 80 500 100"
              stroke="var(--brand-primary-main)"
              strokeWidth="2"
              fill="none"
              strokeDasharray="5 5"
              opacity="0.3"
            />

            <g transform="translate(200 150)" filter="url(#shadow)">
              <circle cx="0" cy="0" r="30" fill="white" />
              <circle cx="0" cy="0" r="25" fill="var(--accent-urgent-main)" />
              <Utensils x="-12" y="-12" width="24" height="24" color="white" />
            </g>

            <g transform="translate(400 200)" filter="url(#shadow)">
              <circle cx="0" cy="0" r="30" fill="white" />
              <circle
                cx="0"
                cy="0"
                r="25"
                fill="var(--accent-secondary-main)"
              />
              <Coffee x="-12" y="-12" width="24" height="24" color="white" />
            </g>

            <g transform="translate(600 180)" filter="url(#shadow)">
              <circle cx="0" cy="0" r="20" fill="white" />
              <circle
                cx="0"
                cy="0"
                r="16"
                fill="var(--accent-gamification-main)"
              />
              <ShoppingBag x="-9" y="-9" width="18" height="18" color="white" />
            </g>

            <g transform="translate(500 100)" filter="url(#shadow)">
              <circle cx="0" cy="0" r="20" fill="white" />
              <circle cx="0" cy="0" r="16" fill="var(--brand-primary-main)" />
              <Ticket x="-9" y="-9" width="18" height="18" color="white" />
            </g>

            <g transform="translate(320 280)">
              <circle cx="0" cy="0" r="40" fill="url(#glow)" />
            </g>
          </svg>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/context/AuthContext.tsx">
import { type ReactNode } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { apiGet, apiPost } from '@/services/api';

import { PATHS } from '@/routing/paths';
import { useToast } from '@/hooks/use-toast';
import type {
  LoginFormValues,
  SignUpFormValues,
} from '@/lib/validationSchemas';
import { AuthContext, type AuthContextType } from './auth-context-definition';

interface User {
  id: number;
  email: string;
  name: string | null;
}

const hasAuthToken = () => !!localStorage.getItem('authToken');

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const queryClient = useQueryClient();
  const navigate = useNavigate();
  const { toast } = useToast();

  const { data: user, isLoading: isLoadingUser } = useQuery({
    queryKey: ['user'],
    queryFn: () => apiGet<User>('/auth/me').then((res) => res.data),
    enabled: hasAuthToken(),
    staleTime: Infinity,
  });

  const { mutateAsync: login, isPending: isLoggingIn } = useMutation({
    mutationFn: (credentials: LoginFormValues) =>
      apiPost<{ token: string }, LoginFormValues>('/auth/login', credentials),
    onSuccess: (response) => {
      if (response.success && response.data?.token) {
        localStorage.setItem('authToken', response.data.token);
        queryClient.invalidateQueries({ queryKey: ['user'] });
        toast({
          title: 'Login Successful!',
          description: 'Welcome back to CitySpark.',
        });
        navigate(PATHS.HOME);
      } else {
        throw new Error(response.error || 'Login failed');
      }
    },
    onError: (error) => {
      toast({
        title: 'Login Failed',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  const { mutateAsync: signup, isPending: isSigningUp } = useMutation({
    mutationFn: (details: SignUpFormValues) =>
      apiPost<unknown, SignUpFormValues>('/auth/register', details),
    onSuccess: (response) => {
      if (response.success) {
        toast({
          title: 'Account Created!',
          description: "You've successfully signed up. Please log in.",
        });
        navigate(PATHS.LOGIN);
      } else {
        throw new Error(response.error || 'Signup failed');
      }
    },
    onError: (error) => {
      toast({
        title: 'Uh oh! Something went wrong.',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  const logout = () => {
    localStorage.removeItem('authToken');
    queryClient.setQueryData(['user'], null);
    navigate(PATHS.HOME);
  };

  const value: AuthContextType = {
    user,
    isLoadingUser,
    login,
    isLoggingIn,
    signup,
    isSigningUp,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
</file>

<file path="web/src/services/api.ts">
const API_BASE_URL = import.meta.env.VITE_API_URL;

export interface ApiResponse<T> {
  success: boolean;
  data: T | null;
  error: string | null;
}

class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  private getAuthToken = () => localStorage.getItem('authToken');

  private async request<T>(
    endpoint: string,
    options: RequestInit,
  ): Promise<ApiResponse<T>> {
    const token = this.getAuthToken();
    const headers = new Headers(options.headers || {});
    headers.set('Content-Type', 'application/json');
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }

    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        ...options,
        headers,
      });
      const contentType = response.headers.get('content-type');

      if (!response.ok) {
        let errorData: { error?: string } = {};
        if (contentType?.includes('application/json')) {
          errorData = await response.json();
        }
        return {
          success: false,
          data: null,
          error: errorData.error || `HTTP error! status: ${response.status}`,
        };
      }

      if (
        response.status === 204 ||
        !contentType?.includes('application/json')
      ) {
        return { success: true, data: null, error: null };
      }

      const data = await response.json();
      return { success: true, data, error: null };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : 'A network error occurred';
      return { success: false, data: null, error: errorMessage };
    }
  }

  public get<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  public post<T, U>(endpoint: string, payload: U): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(payload),
    });
  }

  public put<T, U>(endpoint: string, payload: U): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(payload),
    });
  }

  public delete<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }
}

const api = new ApiClient(API_BASE_URL);

export const apiGet = api.get.bind(api);
export const apiPost = api.post.bind(api);
export const apiPut = api.put.bind(api);
export const apiDelete = api.delete.bind(api);
</file>

<file path="web/src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  --background: 216 50% 96.0784%;
  --foreground: 222.2222 47.3684% 11.1765%;
  --card: 0 0% 100%;
  --card-foreground: 222.2222 47.3684% 11.1765%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2222 47.3684% 11.1765%;
  --primary: 217.2193 91.2195% 59.8039%;
  --primary-foreground: 0 0% 100%;
  --secondary: 210 40% 96.0784%;
  --secondary-foreground: 222.2222 47.3684% 11.1765%;
  --muted: 210 40% 96.0784%;
  --muted-foreground: 215.3846 16.318% 46.8627%;
  --accent: 210 40% 96.0784%;
  --accent-foreground: 222.2222 47.3684% 11.1765%;
  --destructive: 0 84.2365% 60.1961%;
  --destructive-foreground: 0 0% 100%;
  --border: 214.2857 31.8182% 91.3725%;
  --input: 214.2857 31.8182% 91.3725%;
  --ring: 217.2193 91.2195% 59.8039%;
  --chart-1: 217.2193 91.2195% 59.8039%;
  --chart-2: 160.1183 84.0796% 39.4118%;
  --chart-3: 24.5815 94.9791% 53.1373%;
  --chart-4: 258.3117 89.5349% 66.2745%;
  --chart-5: 330.3659 81.1881% 60.3922%;
  --sidebar: 0 0% 100%;
  --sidebar-foreground: 222.2222 47.3684% 11.1765%;
  --sidebar-primary: 217.2193 91.2195% 59.8039%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 210 40% 96.0784%;
  --sidebar-accent-foreground: 222.2222 47.3684% 11.1765%;
  --sidebar-border: 214.2857 31.8182% 91.3725%;
  --sidebar-ring: 217.2193 91.2195% 59.8039%;
  --font-sans: Geist;
  --font-serif: Lora;
  --font-mono: Geist Mono;
  --radius: 1rem;
  --shadow-2xs: 0px 2px 4px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0px 2px 4px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0px 2px 4px 0px hsl(0 0% 0% / 0.25);
  --tracking-normal: 0rem;
  --spacing: 0.25rem;
}

.dark {
  --background: 222.2222 47.3684% 11.1765%;
  --foreground: 210 40% 98.0392%;
  --card: 222.2222 47.3684% 11.1765%;
  --card-foreground: 210 40% 98.0392%;
  --popover: 222.2222 47.3684% 11.1765%;
  --popover-foreground: 210 40% 98.0392%;
  --primary: 217.2193 91.2195% 59.8039%;
  --primary-foreground: 0 0% 100%;
  --secondary: 217.2414 32.5843% 17.451%;
  --secondary-foreground: 210 40% 98.0392%;
  --muted: 217.2414 32.5843% 17.451%;
  --muted-foreground: 215 20.2247% 65.098%;
  --accent: 217.2414 32.5843% 17.451%;
  --accent-foreground: 210 40% 98.0392%;
  --destructive: 0 84.2365% 60.1961%;
  --destructive-foreground: 210 40% 98.0392%;
  --border: 217.2414 32.5843% 17.451%;
  --input: 217.2414 32.5843% 17.451%;
  --ring: 217.2193 91.2195% 59.8039%;
  --chart-1: 217.2193 91.2195% 59.8039%;
  --chart-2: 160.1183 84.0796% 39.4118%;
  --chart-3: 24.5815 94.9791% 53.1373%;
  --chart-4: 258.3117 89.5349% 66.2745%;
  --chart-5: 330.3659 81.1881% 60.3922%;
  --sidebar: 222.2222 47.3684% 11.1765%;
  --sidebar-foreground: 210 40% 98.0392%;
  --sidebar-primary: 217.2193 91.2195% 59.8039%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 217.2414 32.5843% 17.451%;
  --sidebar-accent-foreground: 210 40% 98.0392%;
  --sidebar-border: 217.2414 32.5843% 17.451%;
  --sidebar-ring: 217.2193 91.2195% 59.8039%;
  --font-sans: Geist;
  --font-serif: Lora;
  --font-mono: Geist Mono;
  --radius: 1rem;
  --shadow-2xs: 0px 2px 4px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0px 2px 4px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0px 2px 4px 0px hsl(0 0% 0% / 0.1), 0px 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0px 2px 4px 0px hsl(0 0% 0% / 0.25);
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

/* Line clamp utilities */
.line-clamp-1 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
}

.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

.line-clamp-3 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
}

/* Scrollbar hide utility */
.scrollbar-hide {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

.scrollbar-hide::-webkit-scrollbar {
  display: none; /* Chrome, Safari and Opera */
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="web/src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import App from './App.tsx';
import './styles/global.css';

const queryClient = new QueryClient();

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  </StrictMode>,
);
</file>

<file path="web/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="web/vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { fileURLToPath, URL } from 'node:url';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
});
</file>

<file path="web/src/components/deals/DealResultsList.tsx">
// web/src/components/deals/DealResultsList.tsx
import { ArrowLeft, SlidersHorizontal } from 'lucide-react';
import { DealResultCard } from './DealResultCard';
import { Button } from '../common/Button';
import type { DealWithLocation } from '@/data/deals';
import { useNavigate } from 'react-router-dom';

interface DealResultsListProps {
  deals: DealWithLocation[];
  hoveredDealId: string | null;
  setHoveredDealId: (id: string | null) => void;
}

export const DealResultsList = ({
  deals,
  hoveredDealId,
  setHoveredDealId,
}: DealResultsListProps) => {
  const navigate = useNavigate();

  return (
    <div className="pr-4">
      <div className="mb-6">
        <Button
          onClick={() => navigate(-1)}
          variant="ghost"
          size="sm"
          className="mb-4 px-0 text-neutral-700 hover:text-primary"
          icon={<ArrowLeft className="h-4 w-4" />}
          iconPosition="left"
        >
          All Results
        </Button>
        <h2 className="text-3xl font-bold text-neutral-800">
          New on CitySpark
        </h2>
        <p className="mt-2 text-neutral-600">
          These deals just dropped. Be the first to check them out!
        </p>
      </div>

      <div className="my-6 flex flex-wrap items-center gap-3">
        <Button size="sm" className="rounded-xl">
          Today
        </Button>
        <Button variant="secondary" size="sm" className="rounded-xl">
          All Day
        </Button>
        <Button
          variant="secondary"
          size="sm"
          className="rounded-xl"
          icon={<SlidersHorizontal className="h-4 w-4" />}
          iconPosition="left"
        >
          Filters
        </Button>
      </div>

      <div className="my-6 rounded-2xl border border-amber-200 bg-gradient-to-r from-amber-50 to-yellow-50 p-6 shadow-sm">
        <h3 className="text-lg font-bold text-amber-800">Today's Daily Drop</h3>
        <p className="mb-4 mt-1 text-sm text-amber-700">
          Unlock a massive, one-time discount. Refreshes every day!
        </p>
        <Button
          size="md"
          className="w-full bg-gradient-to-r from-amber-400 to-yellow-400 font-bold text-amber-900 shadow-lg hover:from-amber-500 hover:to-yellow-500 hover:shadow-xl"
        >
          Click to Unlock
        </Button>
      </div>

      <div className="flex flex-col divide-y divide-neutral-200/50">
        {deals.map((deal) => (
          <DealResultCard
            key={deal.id}
            deal={deal}
            isHovered={hoveredDealId === deal.id}
            onMouseEnter={setHoveredDealId}
            onMouseLeave={() => setHoveredDealId(null)}
          />
        ))}
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/deals/DealResultsMap.tsx">
// // import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
// // import 'leaflet/dist/leaflet.css';
// // import L from 'leaflet';
// // import type { DealWithLocation } from '@/data/deals';
// // import { cn } from '@/lib/utils';

// // const createCustomIcon = (isHovered: boolean) => {
// //   return L.divIcon({
// //     className: 'custom-map-marker',
// //     html: `
// //       <div class="${cn(
// //         'flex items-center justify-center w-8 h-8 rounded-full bg-primary shadow-lg transition-all duration-200',
// //         isHovered && 'scale-125 z-10',
// //       )}">
// //         <div class="w-3 h-3 rounded-full bg-white"></div>
// //       </div>
// //     `,
// //     iconSize: [32, 32],
// //     iconAnchor: [16, 16],
// //   });
// // };

// // interface DealResultsMapProps {
// //   deals: DealWithLocation[];
// //   hoveredDealId: string | null;
// // }

// // export const DealResultsMap = ({
// //   deals,
// //   hoveredDealId,
// // }: DealResultsMapProps) => {
// //   const mapCenter: L.LatLngExpression = [40.72, -74.0]; // Centered on NYC

// //   return (
// //     <div className="sticky top-20 h-full w-full">
// //       <MapContainer
// //         center={mapCenter}
// //         zoom={13}
// //         scrollWheelZoom={true}
// //         className="h-full w-full"
// //       >
// //         <TileLayer
// //           attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
// //           url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
// //         />
// //         {deals.map((deal) => (
// //           <Marker
// //             key={deal.id}
// //             position={deal.position}
// //             icon={createCustomIcon(hoveredDealId === deal.id)}
// //           >
// //             <Popup>
// //               <div className="font-sans">
// //                 <b className="text-sm">{deal.name}</b>
// //                 <br />
// //                 {deal.location}
// //               </div>
// //             </Popup>
// //           </Marker>
// //         ))}
// //       </MapContainer>
// //     </div>
// //   );
// // };

// // web/src/components/deals/DealResultsMap.tsx

// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
// import 'leaflet/dist/leaflet.css';
// import L from 'leaflet';
// import type { DealWithLocation } from '@/data/deals';
// import { cn } from '@/lib/utils';

// // --- THE FIX: New premium orange pin ---
// const createCustomIcon = (isHovered: boolean) => {
//   // We need to render the icon to a string to use in Leaflet's divIcon
//   const iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-utensils"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>`;

//   return L.divIcon({
//     className: 'custom-map-marker',
//     html: `
//       <div class="${cn(
//         "flex items-center justify-center w-10 h-10 rounded-full bg-accent-orange border-2 border-white shadow-lg transition-all duration-200",
//         isHovered && "scale-125 z-10"
//       )}">
//         <div class="text-white">
//           ${iconHtml}
//         </div>
//       </div>
//     `,
//     iconSize: [40, 40],
//     iconAnchor: [20, 40], // Anchor to the bottom of the pin
//   });
// };

// interface DealResultsMapProps {
//   deals: DealWithLocation[];
//   hoveredDealId: string | null;
// }

// export const DealResultsMap = ({ deals, hoveredDealId }: DealResultsMapProps) => {
//   const mapCenter: L.LatLngExpression = [40.72, -74.00]; // Centered on NYC

//   return (
//     <div className="h-full w-full sticky top-20">
//       <MapContainer center={mapCenter} zoom={13} scrollWheelZoom={true} className="h-full w-full leaflet-container-dark">
//         <TileLayer
//           attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
//           url="https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png"
//         />
//         {deals.map((deal) => (
//           <Marker
//             key={deal.id}
//             position={deal.position}
//             icon={createCustomIcon(hoveredDealId === deal.id)}
//           >
//             <Popup>
//               <div className="font-sans">
//                 <b className="text-sm">{deal.name}</b><br />{deal.location}
//               </div>
//             </Popup>
//           </Marker>
//         ))}
//       </MapContainer>
//     </div>
//   );
// };

// web/src/components/deals/DealResultsMap.tsx

import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

import { cn } from '@/lib/utils';
import type { DealWithLocation } from '@/data/deals';

const createCustomIcon = (isHovered: boolean) => {
  const iconHtml = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-utensils"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>`;

  return L.divIcon({
    className: 'custom-map-marker',
    html: `
      <div class="${cn(
        'flex items-center justify-center w-10 h-10 rounded-full bg-accent-orange border-2 border-white shadow-lg transition-all duration-200',
        isHovered && 'scale-125 z-10',
      )}">
        <div class="text-white">
          ${iconHtml}
        </div>
      </div>
    `,
    iconSize: [40, 40],
    iconAnchor: [20, 40],
  });
};

interface DealResultsMapProps {
  deals: DealWithLocation[];
  hoveredDealId: string | null;
}

export const DealResultsMap = ({
  deals,
  hoveredDealId,
}: DealResultsMapProps) => {
  const mapCenter: L.LatLngExpression = [40.72, -74.0];

  return (
    <div className="sticky top-20 h-full w-full">
      {/* --- THE FIX: Removed leaflet-container-dark class --- */}
      <MapContainer
        center={mapCenter}
        zoom={13}
        scrollWheelZoom={true}
        className="h-full w-full"
      >
        {/* --- THE FIX: Changed URL to the light map theme --- */}
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
          url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png"
        />
        {deals.map((deal) => (
          <Marker
            key={deal.id}
            position={deal.position}
            icon={createCustomIcon(hoveredDealId === deal.id)}
          >
            <Popup>
              <div className="font-sans">
                <b className="text-sm">{deal.name}</b>
                <br />
                {deal.location}
              </div>
            </Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  );
};
</file>

<file path="web/src/components/deals/DealsSidebar.tsx">
// web/src/components/deals/DealsSidebar.tsx

import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/common/Button';
import {
  Search,
  Utensils,
  Hotel,
  Fuel,
  Coffee,
  Filter,
  MapPin,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import PremiumDealCard from './PremiumDealCard';
import type { DealWithLocation } from '@/data/deals';
import { Pagination } from '../common/Pagination';

const categoryFilters = [
  {
    id: 'restaurant',
    label: 'Restaurants',
    icon: <Utensils className="h-4 w-4" />,
  },
  { id: 'hotel', label: 'Hotels', icon: <Hotel className="h-4 w-4" /> },
  { id: 'gas', label: 'Gas Stations', icon: <Fuel className="h-4 w-4" /> },
  { id: 'coffee', label: 'Cafés', icon: <Coffee className="h-4 w-4" /> },
];

interface DealsSidebarProps {
  deals: DealWithLocation[];
  hoveredDealId: string | null;
  setHoveredDealId: (id: string | null) => void;
}

export const DealsSidebar = ({
  deals,
  hoveredDealId,
  setHoveredDealId,
}: DealsSidebarProps) => {
  const [activeCategory, setActiveCategory] = useState('restaurant');

  return (
    <div className="flex h-full flex-col bg-neutral-50/50">
      {/* Header with responsive premium styling */}
      <div className="flex-shrink-0 border-b border-neutral-200/80 bg-white">
        <div className="p-4 pb-3 sm:p-6 sm:pb-4 lg:p-8 lg:pb-6">
          <div className="mb-4 flex flex-col justify-between gap-3 sm:flex-row sm:items-center lg:mb-6">
            <div className="min-w-0">
              <h1 className="text-xl font-bold tracking-tight text-neutral-900 sm:text-2xl lg:text-3xl">
                Discover Deals
              </h1>
              <div className="mt-1 flex items-center gap-1.5 text-sm text-neutral-600">
                <MapPin className="h-4 w-4 flex-shrink-0 text-neutral-500" />
                <span className="truncate">San Francisco, CA</span>
              </div>
            </div>
            <div className="flex-shrink-0 rounded-xl bg-gradient-to-r from-primary/10 to-primary/5 px-3 py-2">
              <span className="whitespace-nowrap text-sm font-semibold text-primary">
                {deals.length} deals
              </span>
            </div>
          </div>

          <div className="flex flex-col items-stretch gap-3 sm:flex-row sm:items-center">
            <div className="relative flex-grow">
              <Search
                className="absolute left-4 top-1/2 z-10 h-5 w-5 -translate-y-1/2"
                style={{ color: 'hsl(var(--brand-primary-600))' }}
              />
              <Input
                placeholder="Search restaurants, cuisines, areas..."
                className="h-11 rounded-xl border-neutral-200/80 bg-white/80 pl-12 text-sm font-medium backdrop-blur-sm placeholder:text-neutral-400 focus:border-primary/50 focus:ring-primary/10 sm:h-12 sm:text-base"
              />
            </div>
            <button className="flex h-11 w-full items-center justify-center rounded-xl border border-neutral-200/80 bg-white/80 backdrop-blur-sm transition-colors hover:border-primary/30 hover:bg-white sm:h-12 sm:w-12">
              <Filter className="h-5 w-5 text-brand-primary-600" />
              <span className="ml-2 sm:hidden">Filters</span>
            </button>
          </div>
        </div>

        {/* Category Filters with responsive design */}
        <div className="px-4 pb-4 sm:px-6 sm:pb-6 lg:px-8 lg:pb-8">
          <div className="scrollbar-hide flex items-center gap-2 overflow-x-auto p-2 pb-2">
            {categoryFilters.map((cat) => (
              <Button
                key={cat.id}
                onClick={() => setActiveCategory(cat.id)}
                variant={activeCategory === cat.id ? 'primary' : 'ghost'}
                size="sm"
                className={cn(
                  'flex flex-shrink-0 items-center gap-2 whitespace-nowrap rounded-xl border px-3 py-2 text-xs font-semibold transition-all sm:px-4 sm:py-2.5 sm:text-sm',
                  activeCategory === cat.id
                    ? 'scale-105'
                    : 'border-neutral-200/80 bg-white/80 text-neutral-700 hover:border-primary/30 hover:bg-white hover:text-primary',
                )}
              >
                <span className="text-current">{cat.icon}</span>
                <span className="hidden sm:inline">{cat.label}</span>
                <span className="sm:hidden">{cat.label.split(' ')[0]}</span>
              </Button>
            ))}
          </div>
        </div>
      </div>

      {/* Content List with responsive spacing */}
      <div className="flex-grow overflow-y-auto">
        <div className="space-y-4 p-3 sm:space-y-6 sm:p-4 lg:space-y-8 lg:p-6 xl:p-8">
          {deals.map((deal) => (
            <div
              key={deal.id}
              onMouseEnter={() => setHoveredDealId(deal.id)}
              onMouseLeave={() => setHoveredDealId(null)}
              className={cn(
                'transition-all duration-200',
                hoveredDealId === deal.id &&
                  'rounded-2xl ring-2 ring-primary/20',
              )}
            >
              <PremiumDealCard deal={deal} />
            </div>
          ))}
        </div>

        {/* Pagination with responsive spacing */}
        <div className="border-t border-neutral-200/80 bg-white/80 p-4 backdrop-blur-sm sm:p-6 lg:p-8">
          <Pagination />
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/deals/PremiumDealCard.tsx">
// src/components/deals/PremiumDealCard.tsx
import { motion } from 'framer-motion';
import { Star, Clock4 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/common/Button';
import type { Deal } from '@/data/deals';
import { useCountdown } from '@/hooks/useCountdown';
import { Separator } from '@/components/ui/separator';

interface PremiumDealCardProps {
  deal: Deal;
}

const CountdownSegment = ({
  value,
  label,
}: {
  value: number;
  label: string;
}) => (
  <div className="flex flex-col items-center">
    <span className="text-xl font-bold text-neutral-800 sm:text-2xl">
      {String(value).padStart(2, '0')}
    </span>
    <span className="text-[10px] text-neutral-500 sm:text-xs">{label}</span>
  </div>
);

export const PremiumDealCard = ({ deal }: PremiumDealCardProps) => {
  // Always call useCountdown, but with a fallback date if not provided
  const targetDate =
    deal.expiresAt || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
  const countdown = useCountdown(targetDate);
  const { days = 0, hours = 0, minutes = 0 } = countdown || {};
  const isExpiringSoon = days < 1 && hours < 4;

  // Only show countdown if deal actually has an expiration date
  const shouldShowCountdown = Boolean(deal.expiresAt);

  return (
    <motion.div
      className="group w-full cursor-pointer overflow-hidden rounded-2xl border border-neutral-200/80 bg-white shadow-sm transition-all duration-300 hover:border-primary/30 hover:shadow-xl"
      whileHover={{ y: -2 }}
      transition={{ duration: 0.2 }}
    >
      {/* Deal Header - Only show if deal has specific type and value */}
      {deal.dealType && deal.dealValue && (
        <div className="flex items-center justify-between bg-neutral-800 p-3 text-white sm:p-4">
          <div className="flex flex-col">
            <span className="text-xs font-semibold opacity-80 sm:text-sm">
              {deal.dealType.toUpperCase()}
            </span>
            <span className="text-lg font-bold text-amber-400 sm:text-xl">
              {deal.dealValue}
            </span>
          </div>
          <Button
            size="sm"
            className="h-9 rounded-lg bg-white font-bold text-neutral-800 hover:bg-neutral-200 sm:h-10"
          >
            Buy Now!
          </Button>
        </div>
      )}

      {/* Image */}
      <div className="aspect-[4/3] overflow-hidden bg-neutral-100">
        <img
          src={deal.image}
          alt={deal.name}
          className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </div>

      {/* Content Body */}
      <div className="p-3 sm:p-4">
        <div className="mb-2 flex items-start justify-between">
          <h3 className="line-clamp-2 pr-2 font-bold text-neutral-800 sm:text-lg">
            {deal.name}
          </h3>
          <div className="flex flex-shrink-0 items-center gap-1">
            <Star className="h-4 w-4 fill-current text-amber-500" />
            <span className="text-sm font-semibold">{deal.rating}</span>
          </div>
        </div>
        <p className="text-xs text-neutral-500 sm:text-sm">{deal.location}</p>

        {deal.tag && (
          <span className="mt-2 inline-block rounded-full bg-primary/10 px-2 py-1 text-xs text-primary">
            {deal.tag}
          </span>
        )}

        <Separator className="my-3 sm:my-4" />

        {/* Value Proposition - Only show if we have pricing data */}
        {deal.originalValue && deal.discountValue && deal.originalValue > 0 && (
          <div className="mb-3 grid grid-cols-3 divide-x divide-neutral-200 text-center sm:mb-4">
            <div className="pr-2">
              <p className="text-xs text-neutral-500">VALUE</p>
              <p className="text-sm font-bold sm:text-base">
                ${deal.originalValue.toFixed(2)}
              </p>
            </div>
            <div className="px-2">
              <p className="text-xs text-neutral-500">DISCOUNT</p>
              <p className="text-sm font-bold sm:text-base">
                {Math.round((deal.discountValue / deal.originalValue) * 100)}%
              </p>
            </div>
            <div className="pl-2">
              <p className="text-xs text-neutral-500">SAVE</p>
              <p className="text-sm font-bold sm:text-base">
                $
                {Math.max(0, deal.originalValue - deal.discountValue).toFixed(
                  2,
                )}
              </p>
            </div>
          </div>
        )}

        {/* Countdown - Only show if deal has expiration */}
        {shouldShowCountdown && (
          <div>
            <div
              className={cn(
                'mb-2 flex items-center gap-1 text-xs sm:text-sm',
                isExpiringSoon ? 'font-bold text-red-600' : 'text-neutral-600',
              )}
            >
              <Clock4 className="h-3.5 w-3.5" />
              <span>Time left to buy:</span>
            </div>
            <div className="grid grid-cols-3 divide-x divide-neutral-200 rounded-lg bg-neutral-100/70 p-2">
              <CountdownSegment value={days} label="Days" />
              <CountdownSegment value={hours} label="Hours" />
              <CountdownSegment value={minutes} label="Min" />
            </div>
          </div>
        )}
      </div>
    </motion.div>
  );
};

export default PremiumDealCard;
</file>

<file path="web/src/components/landing/CarouselCard.tsx">
import type { Deal } from '@/data/deals';
import { Heart, Star, MapPin } from 'lucide-react';

interface CarouselCardProps {
  deal: Deal;
}

export const CarouselCard = ({ deal }: CarouselCardProps) => {
  return (
    <div className="group w-full cursor-pointer">
      <div className="relative aspect-square overflow-hidden rounded-xl shadow-sm transition-shadow duration-200 hover:shadow-md sm:rounded-2xl">
        <img
          src={deal.image}
          alt={deal.name}
          className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
        {deal.tag && (
          <div className="absolute left-2 top-2 rounded-md bg-white/95 px-1.5 py-0.5 text-xs font-bold text-neutral-800 shadow-sm backdrop-blur-sm sm:left-3 sm:top-3 sm:px-2 sm:py-1">
            {deal.tag}
          </div>
        )}
        <button className="absolute right-2 top-2 flex h-7 w-7 items-center justify-center rounded-full bg-black/20 text-white backdrop-blur-sm transition-all hover:scale-110 hover:bg-red-500/90 hover:text-white sm:right-3 sm:top-3 sm:h-8 sm:w-8">
          <Heart className="h-3.5 w-3.5 sm:h-4 sm:w-4" />
        </button>
      </div>
      <div className="mt-2 sm:mt-3">
        <div className="flex items-start justify-between gap-2">
          <h3 className="line-clamp-2 text-sm font-semibold leading-tight text-neutral-800 sm:text-base">
            {deal.name}
          </h3>
          <div className="flex flex-shrink-0 items-center gap-0.5 sm:gap-1">
            <Star className="h-3.5 w-3.5 fill-current text-amber-500 sm:h-4 sm:w-4" />
            <span className="text-xs font-medium text-amber-700 sm:text-sm">
              {deal.rating.toFixed(1)}
            </span>
          </div>
        </div>
        <p className="mt-0.5 flex items-center gap-1 truncate text-xs text-neutral-500 sm:mt-1 sm:text-sm">
          <MapPin className="h-3 w-3 flex-shrink-0 sm:h-3.5 sm:w-3.5" />
          <span className="truncate">{deal.location}</span>
        </p>
        <p className="mt-1 text-xs text-neutral-800 sm:text-sm">
          <span className="font-bold">
            From <span className="text-sky-600">{deal.price}</span>
          </span>
          <span className="ml-1 text-neutral-500">/ guest</span>
        </p>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/FeaturesSection.tsx">
import { MapPin, Tag, Rocket } from 'lucide-react';
import { motion } from 'framer-motion';

const features = [
  {
    icon: <MapPin className="h-8 w-8 text-brand-primary-main" />,
    title: 'See Your City, Live.',
    description:
      "Ditch the outdated lists. Our live map shows you what's happening *right now*, with deals and hot spots popping up in real-time.",
  },
  {
    icon: <Tag className="text-accent-secondary h-8 w-8" />,
    title: 'Unlock Exclusive Deals.',
    description:
      "From Happy Hours to secret 'check-in' offers, access deals you won't find anywhere else. Be a local, save like an insider.",
  },
  {
    icon: <Rocket className="text-accent-urgent h-8 w-8" />,
    title: 'Play Your Way to Perks.',
    description:
      'Earn points for exploring, climb the city leaderboard, and get rewarded for your loyalty. The more you discover, the more you get back.',
  },
];

export const FeaturesSection = () => {
  return (
    <section className="w-full bg-white py-20 md:py-28">
      <div className="container mx-auto grid max-w-7xl gap-12 px-4 md:grid-cols-3">
        {features.map((feature, i) => (
          <motion.div
            key={feature.title}
            className="flex flex-col items-center text-center md:items-start md:text-left"
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, amount: 0.5 }}
            transition={{ duration: 0.5, delay: i * 0.15 }}
          >
            <div className="bg-neutral-background mb-4 flex h-16 w-16 items-center justify-center rounded-xl">
              {feature.icon}
            </div>
            <h3 className="text-2xl font-bold">{feature.title}</h3>
            <p className="text-neutral-text-secondary mt-2 text-base">
              {feature.description}
            </p>
          </motion.div>
        ))}
      </div>
    </section>
  );
};
</file>

<file path="web/src/components/landing/HeroCallToAction.tsx">
import { Link } from 'react-router-dom';
import { Button } from '@/components/common/Button';
import { ArrowRight } from 'lucide-react';
import { PATHS } from '@/routing/paths';
import { useMerchantStatus } from '@/hooks/useMerchantStatus';

export const HeroCallToAction = () => {
  const { data: merchantData } = useMerchantStatus();

  // Check if user has a merchant profile (any status)
  const hasMerchantProfile = !!merchantData?.data?.merchant;

  return (
    <>
      <div className="mt-8 flex flex-col items-center justify-center gap-4 px-4 sm:mt-10 sm:flex-row sm:gap-6 sm:px-0">
        <Link to={PATHS.LOGIN}>
          <Button variant="google" size="lg" className="w-full sm:w-auto">
            Join in now
          </Button>
        </Link>
        <Link to={PATHS.SIGNUP}>
          <Button
            variant="primary"
            size="lg"
            icon={<ArrowRight className="h-4 w-4" />}
            iconPosition="right"
            className="w-full sm:w-auto"
          >
            See the Live Map
          </Button>
        </Link>
      </div>

      {!hasMerchantProfile && (
        <p className="text-neutral-text-secondary mt-6 px-4 text-sm sm:px-0 sm:text-base">
          Are you a business?{' '}
          <Link
            to={PATHS.MERCHANT_ONBOARDING}
            className="font-medium text-brand-primary-main hover:underline"
          >
            Get on the map in minutes
          </Link>
        </p>
      )}
    </>
  );
};
</file>

<file path="web/src/components/layout/NavbarSearch.tsx">
import { Search } from 'lucide-react';

interface NavbarSearchProps {
  onClick: () => void;
}

export const NavbarSearch = ({ onClick }: NavbarSearchProps) => {
  return (
    <button
      onClick={onClick}
      className="mx-auto w-full max-w-md cursor-pointer rounded-full border border-neutral-200/90 bg-white text-left shadow-sm transition-shadow duration-300 hover:shadow-md"
      aria-label="Open search"
    >
      <div className="flex items-center justify-between py-2 pl-6 pr-2">
        <div className="flex items-center divide-x divide-neutral-200/90">
          <div className="pr-4">
            <p className="text-sm font-semibold text-neutral-800">
              Search deals
            </p>
          </div>
          <div className="px-4">
            <p className="text-sm text-neutral-500">Any week</p>
          </div>
          <div className="px-4">
            <p className="text-sm text-neutral-500">Add guests</p>
          </div>
        </div>
        <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-b from-brand-primary-400 to-brand-primary-600 shadow-md transition-all duration-200 hover:from-brand-primary-500 hover:to-brand-primary-700 hover:shadow-lg">
          <Search className="h-4 w-4 text-white" />
        </div>
      </div>
    </button>
  );
};
</file>

<file path="web/src/config/design-system.json">
{
  "meta": {
    "systemName": "Geolocation MVP",
    "version": "1.0.0",
    "description": "A design system for a geo-location deals and social app targeting a young, modern audience. It blends functional clarity with a vibrant, energetic aesthetic to inspire discovery and action.",
    "lastUpdated": "2025-07-24T10:00:00+00:00"
  },
  "palette": {
    "brand": {
      "primary": {
        "main": "#2563EB",
        "dark": "#1D4ED8",
        "light": "#DBEAFE",
        "contrastText": "#FFFFFF",
        "description": "The main brand color for primary CTAs, links, and active states.",
        "50": "#EFF6FF",
        "100": "#DBEAFE",
        "200": "#BFDBFE",
        "300": "#93C5FD",
        "400": "#60A5FA",
        "500": "#3B82F6",
        "600": "#2563EB",
        "700": "#1D4ED8",
        "800": "#1E40AF",
        "900": "#1E3A8A"
      }
    },
    "accent": {
      "urgent": {
        "main": "#FF3B5C",
        "contrastText": "#FFFFFF",
        "description": "For urgent, time-sensitive elements like countdown timers and 'Hot Deal' tags."
      },
      "secondary": {
        "main": "#F5A623",
        "contrastText": "#FFFFFF",
        "description": "For secondary highlights, featured items, and special perks."
      },
      "gamification": {
        "main": "#7ED321",
        "contrastText": "#FFFFFF",
        "description": "For positive reinforcement: points, achievements, and success states."
      },
      "spark": {
        "main": "#F97316",
        "contrastText": "#FFFFFF",
        "description": "Energetic orange for sparking action and discovery."
      },
      "claude": {
        "main": "#F97316",
        "light": "#FED7AA",
        "contrastText": "#FFFFFF",
        "description": "Claude AI brand colors for integrations."
      },
      "orange": {
        "100": "#FFEDD5",
        "200": "#FDBA74",
        "400": "#FB923C",
        "600": "#EA580C"
      },
      "purple": {
        "400": "#A78BFA"
      }
    },
    "neutral": {
      "background": "#F4F7F9",
      "surface": "#FFFFFF",
      "text_primary": "#111827",
      "text_secondary": "#6B7280",
      "text_tertiary": "#9CA3AF",
      "border": "#E5E7EB",
      "border_light": "#F3F4F6",
      "subtle_background": "#F9FAFB"
    },
    "gradients": {
      "hero": {
        "from": "#DBEAFE",
        "via": "#EFF6FF",
        "to": "#FFFFFF",
        "description": "Hero section gradient background"
      },
      "card": {
        "from": "#FFFFFF",
        "to": "#F8FAFC",
        "description": "Subtle card gradient"
      }
    },
    "semantic": {
      "error": "#DC2626",
      "success": "#059669",
      "warning": "#D97706",
      "info": "#2563EB"
    }
  },
  "typography": {
    "fontFamily": {
      "headings": "'Poppins', 'Helvetica Neue', sans-serif",
      "body": "'Inter', 'Roboto', 'Arial', sans-serif"
    },
    "weights": {
      "regular": 400,
      "semiBold": 600,
      "bold": 700
    },
    "scale": {
      "display": {
        "fontFamily": "var(--font-headings)",
        "fontSize": "2.5rem",
        "fontWeight": 700,
        "lineHeight": 1.2
      },
      "h1": {
        "fontFamily": "var(--font-headings)",
        "fontSize": "2rem",
        "fontWeight": 700,
        "lineHeight": 1.25
      },
      "h2": {
        "fontFamily": "var(--font-headings)",
        "fontSize": "1.5rem",
        "fontWeight": 600,
        "lineHeight": 1.3
      },
      "h3": {
        "fontFamily": "var(--font-headings)",
        "fontSize": "1.25rem",
        "fontWeight": 600,
        "lineHeight": 1.4
      },
      "body_default": {
        "fontFamily": "var(--font-body)",
        "fontSize": "1rem",
        "fontWeight": 400,
        "lineHeight": 1.5
      },
      "body_small": {
        "fontFamily": "var(--font-body)",
        "fontSize": "0.875rem",
        "fontWeight": 400,
        "lineHeight": 1.5
      },
      "label": {
        "fontFamily": "var(--font-body)",
        "fontSize": "0.875rem",
        "fontWeight": 600,
        "lineHeight": 1.4
      },
      "caption": {
        "fontFamily": "var(--font-body)",
        "fontSize": "0.75rem",
        "fontWeight": 400,
        "lineHeight": 1.4
      },
      "overline": {
        "fontFamily": "var(--font-body)",
        "fontSize": "0.625rem",
        "fontWeight": 700,
        "lineHeight": 1.6,
        "textTransform": "uppercase"
      }
    }
  },
  "spacing": {
    "baseUnit": "4px",
    "xs": "4px",
    "sm": "8px",
    "md": "16px",
    "lg": "24px",
    "xl": "32px",
    "xxl": "48px"
  },
  "borders": {
    "radius": {
      "sm": "8px",
      "md": "12px",
      "lg": "16px",
      "pill": "9999px",
      "circle": "50%"
    },
    "width": {
      "default": "1px",
      "thick": "2px"
    }
  },
  "shadows": {
    "level1": "0px 2px 4px rgba(0, 0, 0, 0.06)",
    "level2": "0px 4px 8px rgba(0, 0, 0, 0.08)",
    "level3": "0px 10px 20px rgba(0, 0, 0, 0.1)",
    "interactive": "0 0 0 3px rgba(74, 144, 226, 0.3)"
  },
  "iconography": {
    "library": "Phosphor Icons",
    "style": "Fill",
    "size": {
      "sm": "16px",
      "md": "20px",
      "lg": "24px"
    }
  },
  "components": {
    "button": {
      "base": {
        "height": "40px",
        "padding": "0 16px",
        "borderRadius": "8px",
        "fontSize": "14px",
        "fontWeight": "500",
        "transition": "all 200ms ease-in-out"
      },
      "variants": {
        "primary": {
          "backgroundColor": "#2563EB",
          "color": "#FFFFFF",
          "border": "none",
          "hoverBackgroundColor": "#1D4ED8"
        },
        "secondary": {
          "backgroundColor": "#FFFFFF",
          "color": "#111827",
          "border": "1px solid #E5E7EB",
          "hoverBackgroundColor": "#F9FAFB"
        },
        "google": {
          "backgroundColor": "#FFFFFF",
          "color": "#111827",
          "border": "1px solid #E5E7EB",
          "hoverBackgroundColor": "#F9FAFB",
          "icon": "google"
        },
        "ghost": {
          "backgroundColor": "transparent",
          "color": "#6B7280",
          "border": "none",
          "hoverColor": "#111827"
        }
      },
      "sizes": {
        "sm": {
          "height": "32px",
          "padding": "0 12px",
          "fontSize": "12px"
        },
        "md": {
          "height": "40px",
          "padding": "0 16px",
          "fontSize": "14px"
        },
        "lg": {
          "height": "48px",
          "padding": "0 24px",
          "fontSize": "16px"
        }
      }
    },
    "card": {
      "backgroundColor": "#FFFFFF",
      "borderRadius": "16px",
      "boxShadow": "0px 4px 8px rgba(0, 0, 0, 0.08)",
      "padding": "16px"
    },
    "inputField": {
      "height": "52px",
      "backgroundColor": "#FFFFFF",
      "borderColor": "#E5E7EB",
      "borderRadius": "8px",
      "padding": "0 16px"
    },
    "navbar": {
      "height": "64px",
      "backgroundColor": "transparent",
      "backdropFilter": "blur(8px)",
      "borderBottom": "1px solid #F3F4F6"
    },
    "hero": {
      "background": "linear-gradient(to bottom, #DBEAFE, #EFF6FF, #FFFFFF)",
      "minHeight": "100vh",
      "padding": "80px 24px"
    }
  },
  "transitions": {
    "duration": "200ms",
    "timingFunction": "ease-in-out"
  }
}
</file>

<file path="web/src/lib/utils.ts">
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="web/src/pages/AboutPage.tsx">
export const AboutPage = () => {
  return (
    <div className="container mx-auto min-h-screen max-w-4xl px-4 py-16">
      <h1 className="text-h1 mb-8 text-center">About CitySpark</h1>
      <div className="prose prose-lg mx-auto">
        <p className="text-neutral-text-secondary text-lg">
          CitySpark is revolutionizing how you discover local experiences. We
          connect you with real-time deals and experiences from the best local
          businesses in your city.
        </p>
        <p>
          Coming soon - our full about page with our story, mission, and team.
        </p>
      </div>
    </div>
  );
};
</file>

<file path="web/src/pages/AllDealsPage.tsx">
// // web/src/pages/AllDealsPage.tsx
// import { useState } from 'react';
// import { DealResultsList } from '@/components/deals/DealResultsList';
// import { DealResultsMap } from '@/components/deals/DealResultsMap';
// import { allDeals } from '@/data/deals';

// export const AllDealsPage = () => {
//   const [hoveredDealId, setHoveredDealId] = useState<string | null>(null);

//   return (
//     <div className="mb-12 pt-24">
//       <div className="grid grid-cols-1 lg:grid-cols-3 xl:grid-cols-2">
//         <div className="no-scrollbar h-screen overflow-y-auto px-4 lg:col-span-1 xl:col-span-1">
//           <DealResultsList
//             deals={allDeals}
//             hoveredDealId={hoveredDealId}
//             setHoveredDealId={setHoveredDealId}
//           />
//         </div>

//         <div className="hidden h-screen lg:col-span-2 lg:block xl:col-span-1">
//           <DealResultsMap deals={allDeals} hoveredDealId={hoveredDealId} />
//         </div>
//       </div>
//     </div>
//   );
// };

// web/src/pages/AllDealsPage.tsx

import { useState } from 'react';
import { DealsSidebar } from '@/components/deals/DealsSidebar';
import { DealResultsMap } from '@/components/deals/DealResultsMap';
import { allDeals } from '@/data/deals';

export const AllDealsPage = () => {
  const [hoveredDealId, setHoveredDealId] = useState<string | null>(null);

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-white to-neutral-50/50 pt-20">
      {/* Full-width responsive layout with smart containers */}
      <div className="w-full">
        <div className="grid min-h-[calc(100vh-5rem)] grid-cols-1 lg:grid-cols-12">
          {/* Left Column: Responsive Sidebar with container */}
          <div className="border-r border-neutral-200/80 bg-white/80 shadow-sm backdrop-blur-sm lg:col-span-5 xl:col-span-4 2xl:col-span-3">
            <div className="h-max overflow-hidden lg:h-screen">
              <DealsSidebar
                deals={allDeals}
                hoveredDealId={hoveredDealId}
                setHoveredDealId={setHoveredDealId}
              />
            </div>
          </div>

          {/* Right Column: Full-width Map */}
          <div className="relative hidden h-[calc(100vh-5rem)] bg-neutral-100/30 lg:col-span-7 lg:block xl:col-span-8 2xl:col-span-9">
            <DealResultsMap deals={allDeals} hoveredDealId={hoveredDealId} />
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/pages/ForBusinessesPage.tsx">
export const ForBusinessesPage = () => {
  return (
    <div className="container mx-auto min-h-screen max-w-4xl px-4 py-16">
      <h1 className="text-h1 mb-8 text-center">CitySpark for Businesses</h1>
      <div className="prose prose-lg mx-auto">
        <p className="text-neutral-text-secondary text-lg">
          Put your business on the map and connect with customers who are ready
          to discover you.
        </p>
        <p>Coming soon - our complete business onboarding experience.</p>
      </div>
    </div>
  );
};
</file>

<file path="web/src/pages/PrivacyPage.tsx">
export const PrivacyPage = () => {
  return (
    <div className="container mx-auto min-h-screen max-w-4xl px-4 py-16">
      <h1 className="text-h1 mb-8 text-center">Privacy Policy</h1>
      <div className="prose prose-lg mx-auto">
        <p className="text-neutral-text-secondary text-lg">
          Your privacy is important to us. This page will contain our full
          privacy policy.
        </p>
        <p>
          Coming soon - our complete privacy policy detailing how we handle your
          data.
        </p>
      </div>
    </div>
  );
};
</file>

<file path="web/src/pages/ProfilePage.tsx">
export const ProfilePage = () => <h1 className="p-lg text-h1">Profile Page</h1>;
</file>

<file path="web/src/pages/TermsPage.tsx">
export const TermsPage = () => {
  return (
    <div className="container mx-auto min-h-screen max-w-4xl px-4 py-16">
      <h1 className="text-h1 mb-8 text-center">Terms of Service</h1>
      <div className="prose prose-lg mx-auto">
        <p className="text-neutral-text-secondary text-lg">
          Please read these terms carefully before using CitySpark.
        </p>
        <p>Coming soon - our complete terms of service.</p>
      </div>
    </div>
  );
};
</file>

<file path="web/postcss.config.ts">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="web/src/components/deals/DealResultCard.tsx">
import { motion } from 'framer-motion';
import { Heart, Star } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { DealWithLocation } from '@/data/deals';
import { Button } from '../common/Button';

interface DealResultCardProps {
  deal: DealWithLocation;
  isHovered: boolean;
  onMouseEnter: (id: string) => void;
  onMouseLeave: () => void;
}

export const DealResultCard = ({
  deal,
  isHovered,
  onMouseEnter,
  onMouseLeave,
}: DealResultCardProps) => {
  return (
    <motion.div
      onMouseEnter={() => onMouseEnter(deal.id)}
      onMouseLeave={onMouseLeave}
      className={cn(
        'flex cursor-pointer gap-3 rounded-lg p-3 transition-colors duration-200 sm:gap-4',
        isHovered && 'bg-neutral-100',
      )}
    >
      <img
        src={deal.image}
        alt={deal.name}
        className="h-20 w-20 flex-shrink-0 rounded-md object-cover sm:h-24 sm:w-24"
      />
      <div className="min-w-0 flex-grow">
        <div className="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
          <div className="min-w-0 flex-1">
            <h3 className="truncate font-bold text-neutral-800 sm:text-lg">
              {deal.name}
            </h3>
            <div className="mt-1 flex flex-wrap items-center gap-1 text-sm text-neutral-600 sm:gap-2">
              <div className="flex items-center gap-0.5">
                <Star className="h-4 w-4 fill-current text-red-500" />
                <span>{deal.rating}</span>
              </div>
              <span className="hidden sm:inline">&middot;</span>
              <span className="truncate">{deal.category}</span>
              <span className="hidden sm:inline">&middot;</span>
              <span className="font-medium text-sky-600">{deal.price}</span>
            </div>
            <p className="mt-1 truncate text-sm text-neutral-500">
              {deal.location}
            </p>
          </div>
          <div className="flex items-center gap-2 sm:flex-col sm:items-end">
            <Button
              variant="secondary"
              size="sm"
              className="border-green-200 bg-green-100 text-xs font-bold text-green-700 hover:bg-green-200 sm:text-sm"
            >
              DEAL
            </Button>
            <button className="p-1 text-neutral-400 hover:text-red-500 sm:p-2">
              <Heart className="h-5 w-5 sm:h-6 sm:w-6" />
            </button>
          </div>
        </div>
        <p className="mt-2 line-clamp-2 text-sm text-neutral-600">
          {deal.description}
        </p>
      </div>
    </motion.div>
  );
};
</file>

<file path="web/src/components/layout/ProfileDropDown.tsx">
// src/components/layout/ProfileDropDown.tsx
import { Link } from 'react-router-dom';
import { LogOut, User, Settings, LayoutDashboard } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useAuth } from '@/context/useAuth';
import { PATHS } from '@/routing/paths';
import { useMerchantStatus } from '@/hooks/useMerchantStatus'; // <-- THE FIX

export const ProfileDropDown = () => {
  const { user, logout } = useAuth();
  const { data: merchantStatus } = useMerchantStatus(); // <-- THE FIX
  const isApprovedMerchant =
    merchantStatus?.data?.merchant?.status === 'APPROVED';

  const userInitials = user?.name
    ? user.name
        .split(' ')
        .map((n) => n[0])
        .join('')
        .toUpperCase()
    : (user?.email?.[0].toUpperCase() ?? 'U');

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <button className="rounded-full focus:outline-none focus:ring-2 focus:ring-brand-primary-main focus:ring-offset-2">
          <Avatar>
            <AvatarImage
              src="https://github.com/shadcn.png"
              alt={user?.name || ''}
            />
            <AvatarFallback>{userInitials}</AvatarFallback>
          </Avatar>
        </button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end">
        <DropdownMenuLabel>My Account</DropdownMenuLabel>
        <DropdownMenuSeparator />

        {/* --- THE FIX: Conditional Merchant Link --- */}
        {isApprovedMerchant && (
          <>
            <DropdownMenuItem asChild>
              <Link to={PATHS.MERCHANT_DASHBOARD}>
                <LayoutDashboard className="mr-2 h-4 w-4" />
                <span>Switch to Merchant View</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
          </>
        )}

        <DropdownMenuItem asChild>
          <Link to={PATHS.PROFILE}>
            <User className="mr-2 h-4 w-4" />
            <span>Profile</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuItem asChild>
          <Link to={PATHS.SETTINGS}>
            <Settings className="mr-2 h-4 w-4" />
            <span>Settings</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={logout}>
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};
</file>

<file path="web/src/routing/paths.ts">
export const PATHS = {
  HOME: '/',
  ALL_DEALS: '/deals',
  MAP: '/map',
  PRICING: '/pricing',

  FOR_BUSINESSES: '/business',
  BUSINESS_SIGNUP: '/business/signup',
  BUSINESS_DASHBOARD: '/business/dashboard',

  // Merchant paths
  MERCHANT_DASHBOARD: '/merchant/dashboard',
  MERCHANT_ONBOARDING: '/merchant/onboarding',
  MERCHANT_DEALS_CREATE: '/merchant/deals/create',

  LOGIN: '/login',
  SIGNUP: '/signup',
  VERIFY_OTP: '/verify-otp',
  FORGOT_PASSWORD: '/forgot-password',
  RESET_PASSWORD: '/reset-password',

  PROFILE: '/profile',
  PROFILE_EDIT: '/profile/edit',
  SETTINGS: '/settings',

  DEAL_DETAIL: '/deals/:dealId',
  LOCATION_DETAIL: '/locations/:locationId',
  CATEGORY: '/category/:categoryId',

  MY_SAVED_DEALS: '/my-activity/saved-deals',
  MY_BOOKINGS: '/my-activity/bookings',
  MY_FAVORITES: '/my-activity/favorites',

  ABOUT: '/about',
  CONTACT: '/contact',
  SUPPORT: '/support',
  TERMS: '/terms',
  PRIVACY: '/privacy',

  NOT_FOUND: '*',
} as const;
</file>

<file path="web/src/components/landing/DashboardPreview.tsx">
import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';
import { DealMap } from './DealMap';
import { DealList } from './DealList';
import L from 'leaflet';

const deals = [
  {
    id: 1,
    name: '2-for-1 Tacos',
    business: 'Taco Fiesta',
    distance: '0.2 mi',
    position: [51.515, -0.09] as L.LatLngExpression,
    category: 'Food',
  },
  {
    id: 2,
    name: 'Happy Hour Drafts',
    business: 'The Brew House',
    distance: '0.5 mi',
    position: [51.51, -0.1] as L.LatLngExpression,
    category: 'Drinks',
  },
  {
    id: 3,
    name: '50% Off Appetizers',
    business: 'Gourmet Grill',
    distance: '0.8 mi',
    position: [51.52, -0.12] as L.LatLngExpression,
    category: 'Food',
  },
  {
    id: 4,
    name: 'Free Coffee Top-up',
    business: 'Morning Buzz',
    distance: '1.2 mi',
    position: [51.5, -0.08] as L.LatLngExpression,
    category: 'Drinks',
  },
];

export const DashboardPreview = () => {
  const [hoveredDealId, setHoveredDealId] = useState<number | null>(null);
  const [mapCenter, setMapCenter] = useState<L.LatLngExpression>([
    51.505, -0.09,
  ]);

  useEffect(() => {
    if (hoveredDealId) {
      const deal = deals.find((d) => d.id === hoveredDealId);
      if (deal) {
        setMapCenter(deal.position);
      }
    }
  }, [hoveredDealId]);

  return (
    <div className="relative z-10 mb-12">
      <div className="container mx-auto max-w-6xl px-4 sm:px-6">
        <motion.div
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true, amount: 0.1 }}
          transition={{ duration: 0.8, delay: 0.5, ease: [0.25, 1, 0.5, 1] }}
          className="rounded-2xl bg-white p-2 shadow-2xl ring-1 ring-black/5 sm:p-4"
        >
          <div className="aspect-w-16 aspect-h-12 sm:aspect-none bg-neutral-background-strong flex flex-col overflow-hidden rounded-xl sm:flex-row">
            <DealMap
              deals={deals}
              mapCenter={mapCenter}
              hoveredDealId={hoveredDealId}
            />
            <DealList
              deals={deals}
              hoveredDealId={hoveredDealId}
              setHoveredDealId={setHoveredDealId}
            />
          </div>
        </motion.div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/common/ContentCarousel.tsx">
// web/src/components/common/ContentCarousel.tsx

import { useRef } from 'react';
import { Link } from 'react-router-dom';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import PremiumDealCard from '@/components/deals/PremiumDealCard'; // <-- THE FIX
import { Button } from '@/components/common/Button';
import { type Deal } from '@/data/deals';
import { PATHS } from '@/routing/paths';
import { motion } from 'framer-motion';

interface ContentCarouselProps {
  title: string;
  deals: Deal[];
}

export const ContentCarousel = ({ title, deals }: ContentCarouselProps) => {
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  const scroll = (direction: 'left' | 'right') => {
    if (scrollContainerRef.current) {
      const scrollAmount =
        direction === 'left'
          ? -scrollContainerRef.current.clientWidth
          : scrollContainerRef.current.clientWidth;
      scrollContainerRef.current.scrollBy({
        left: scrollAmount,
        behavior: 'smooth',
      });
    }
  };

  const carouselVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 0.4 } },
  };

  return (
    <motion.div
      className="bg-white py-6 sm:py-8 lg:py-12"
      variants={carouselVariants}
      initial="hidden"
      animate="visible"
      exit="hidden"
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <div className="mb-4 flex items-center justify-between sm:mb-6">
          <h2 className="text-xl font-bold tracking-tight text-neutral-900 sm:text-2xl">
            {title}
          </h2>
          <div className="flex items-center gap-1 sm:gap-2">
            <Link to={PATHS.ALL_DEALS}>
              <Button
                variant="secondary"
                size="sm"
                className="rounded-full px-3 py-1.5 text-xs font-semibold sm:px-4 sm:py-2 sm:text-sm"
              >
                Show all
              </Button>
            </Link>
            <button
              onClick={() => scroll('left')}
              className="hidden h-7 w-7 items-center justify-center rounded-full border border-neutral-300 bg-white shadow-sm transition-all hover:bg-neutral-50 hover:shadow-md sm:flex sm:h-8 sm:w-8"
              aria-label="Scroll left"
            >
              <ChevronLeft className="h-3.5 w-3.5 text-neutral-600 sm:h-4 sm:w-4" />
            </button>
            <button
              onClick={() => scroll('right')}
              className="hidden h-7 w-7 items-center justify-center rounded-full border border-neutral-300 bg-white shadow-sm transition-all hover:bg-neutral-50 hover:shadow-md sm:flex sm:h-8 sm:w-8"
              aria-label="Scroll right"
            >
              <ChevronRight className="h-3.5 w-3.5 text-neutral-600 sm:h-4 sm:w-4" />
            </button>
          </div>
        </div>

        {/* --- THE FIX: Use PremiumDealCard and adjust widths --- */}
        <div
          ref={scrollContainerRef}
          className="scrollbar-hide flex gap-6 overflow-x-auto pb-4"
        >
          {deals.map((deal) => (
            <div key={deal.id} className="w-[320px] flex-shrink-0 sm:w-[350px]">
              <PremiumDealCard deal={deal} />
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
};
</file>

<file path="web/src/pages/SignUpPage.tsx">
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Eye, EyeOff, Mail, Lock, User, Phone, Loader2 } from 'lucide-react';

import { Button } from '@/components/common/Button';
import { Input } from '@/components/ui/input';

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from '@/components/ui/form';
import { PATHS } from '@/routing/paths';
import { signUpSchema, type SignUpFormValues } from '@/lib/validationSchemas';
import { useAuth } from '@/context/useAuth';

export const SignUpPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const { signup, isSigningUp } = useAuth();

  const form = useForm<SignUpFormValues>({
    resolver: zodResolver(signUpSchema),
    mode: 'onTouched',
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (values: SignUpFormValues) => {
    await signup(values);
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-b from-brand-primary-light via-brand-primary-50 to-white px-4 py-24 sm:px-6 lg:px-8">
      <div className="pointer-events-none absolute inset-0 overflow-hidden">
        <div className="absolute bottom-0 left-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
        <div className="absolute bottom-0 right-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
        <div className="absolute left-0 right-0 top-[10%] h-0.5 bg-brand-primary-200/40"></div>
      </div>

      <div className="relative z-10 w-full max-w-md">
        <div className="border-neutral-border/20 shadow-level-3 rounded-xl border bg-white/80 p-8 backdrop-blur-md">
          <div className="mb-8 text-center">
            <h1 className="text-neutral-text-primary mb-2 text-2xl font-bold">
              Create your account
            </h1>
            <p className="text-neutral-text-secondary">
              Join us to discover amazing deals near you
            </p>
          </div>
          <Button variant="google" size="lg" className="mb-6 w-full">
            Continue with Google
          </Button>

          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="border-neutral-border-light w-full border-t"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="text-neutral-text-secondary bg-white px-3">
                or continue with email
              </span>
            </div>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                        First name
                      </FormLabel>
                      <FormControl>
                        <div className="relative">
                          <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                            <User className="h-5 w-5 text-brand-primary-500" />
                          </div>
                          <Input
                            placeholder="First name"
                            {...field}
                            className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-4 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                          />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                        Last name
                      </FormLabel>
                      <FormControl>
                        <div className="relative">
                          <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                            <User className="h-5 w-5 text-brand-primary-500" />
                          </div>
                          <Input
                            placeholder="Last name"
                            {...field}
                            className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-4 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                          />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Email address
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Mail className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type="email"
                          placeholder="Enter your email"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-4 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Phone number
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Phone className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type="tel"
                          placeholder="Enter your phone number"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-4 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Password
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Lock className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type={showPassword ? 'text' : 'password'}
                          placeholder="Create a password"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-12 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute inset-y-0 right-0 flex items-center pr-3"
                        >
                          {showPassword ? (
                            <EyeOff className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          ) : (
                            <Eye className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          )}
                        </button>
                      </div>
                    </FormControl>
                    <FormDescription>
                      Must be 8+ characters with uppercase, lowercase, number,
                      and special characters.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="confirmPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Confirm password
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Lock className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type={showConfirmPassword ? 'text' : 'password'}
                          placeholder="Confirm your password"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-12 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                        <button
                          type="button"
                          onClick={() =>
                            setShowConfirmPassword(!showConfirmPassword)
                          }
                          className="absolute inset-y-0 right-0 flex items-center pr-3"
                        >
                          {showConfirmPassword ? (
                            <EyeOff className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          ) : (
                            <Eye className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          )}
                        </button>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex items-start">
                <input
                  id="terms"
                  name="terms"
                  type="checkbox"
                  required
                  className="border-neutral-border mt-1 h-4 w-4 rounded text-brand-primary-main focus:ring-brand-primary-main/50"
                />
                <label
                  htmlFor="terms"
                  className="text-neutral-text-secondary ml-2 block text-sm"
                >
                  I agree to the{' '}
                  <Link
                    to={PATHS.TERMS}
                    className="font-medium text-brand-primary-main hover:text-brand-primary-dark"
                  >
                    Terms of Service
                  </Link>{' '}
                  and{' '}
                  <Link
                    to={PATHS.PRIVACY}
                    className="font-medium text-brand-primary-main hover:text-brand-primary-dark"
                  >
                    Privacy Policy
                  </Link>
                </label>
              </div>

              <Button
                type="submit"
                variant="primary"
                size="lg"
                className="w-full"
                disabled={isSigningUp}
              >
                {isSigningUp && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Create account
              </Button>
            </form>
          </Form>

          <div className="mt-8 text-center">
            <p className="text-neutral-text-secondary text-sm">
              Already have an account?{' '}
              <Link
                to={PATHS.LOGIN}
                className="font-medium text-brand-primary-main hover:text-brand-primary-dark"
              >
                Sign in
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/common/Logo.tsx">
import { Link } from 'react-router-dom';
import { PATHS } from '@/routing/paths';

export const Logo = () => {
  return (
    <Link to={PATHS.HOME} className="group flex items-center gap-2">
      <div className="flex items-center gap-3">
        <div className="relative">
          <div className="to-accent-purple-400 absolute inset-0 h-8 w-8 rounded-lg bg-gradient-to-br from-brand-primary-400 via-cyan-500 opacity-0 blur-sm transition-opacity duration-300 group-hover:opacity-60"></div>

          <div className="relative flex aspect-square h-8 w-8 items-center justify-center rounded-md bg-gradient-to-br from-brand-primary-500 via-cyan-500 to-brand-primary-600 shadow-lg transition-all duration-300 group-hover:shadow-xl">
            <div className="absolute inset-0 animate-pulse rounded-lg border-2 border-transparent bg-gradient-to-r from-cyan-400 to-brand-primary-500 opacity-0 transition-opacity duration-300 group-hover:opacity-100"></div>

            <svg
              width="18"
              height="18"
              viewBox="0 0 18 18"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              className="relative z-10 group-hover:animate-pulse"
            >
              <defs>
                <linearGradient
                  id="logoGradient"
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#ffffff" />
                  <stop offset="100%" stopColor="#e0f2fe" />
                </linearGradient>
              </defs>
              <path
                d="M3 8L8 3L13 8L8 13L3 8Z"
                fill="url(#logoGradient)"
                stroke="white"
                strokeWidth="1"
                className="drop-shadow-sm"
              />
              <circle
                cx="14"
                cy="4"
                r="2"
                fill="white"
                className="duration-2000 animate-ping"
              />
            </svg>

            <div className="absolute right-1 top-1 h-1 w-1 animate-ping rounded-full bg-white opacity-0 group-hover:opacity-100"></div>
          </div>
        </div>
        <span className="text-neutral-text-primary text-xl font-semibold tracking-tight transition-colors duration-300">
          CitySpark
        </span>
      </div>
    </Link>
  );
};
</file>

<file path="web/src/components/landing/DealCard.tsx">
// web/src/components/landing/DealCard.tsx
import type { Deal } from '@/data/deals';
import { Heart, MapPin, Star } from 'lucide-react';

interface DealCardProps {
  deal: Deal;
}

export const DealCard = ({ deal }: DealCardProps) => {
  return (
    <div className="flex items-center gap-3 rounded-lg px-3 py-4 transition-colors hover:bg-neutral-50 sm:gap-4 sm:px-2 sm:py-3">
      <img
        src={deal.image}
        alt={deal.name}
        className="h-14 w-14 flex-shrink-0 rounded-md object-cover sm:h-16 sm:w-16"
      />
      <div className="min-w-0 flex-grow">
        <h4 className="truncate font-semibold text-neutral-800 sm:text-base">
          {deal.name}
        </h4>
        <div className="mt-1 flex flex-wrap items-center gap-1.5 text-sm text-neutral-600 sm:gap-2">
          <div className="flex items-center gap-0.5">
            <Star className="h-4 w-4 fill-current text-red-500" />
            <span>{deal.rating.toFixed(1)}</span>
          </div>
          <span className="hidden sm:inline">&middot;</span>
          <span className="truncate">{deal.category}</span>
          <span className="hidden sm:inline">&middot;</span>
          <span className="font-medium text-sky-600">{deal.price}</span>
        </div>
        <div className="mt-1 flex items-center gap-1.5 text-sm text-neutral-500">
          <MapPin className="h-4 w-4 flex-shrink-0" />
          <span className="truncate">{deal.location}</span>
        </div>
      </div>
      <button className="flex-shrink-0 p-2 text-neutral-400 transition-colors hover:text-red-500">
        <Heart className="h-5 w-5 sm:h-6 sm:w-6" />
      </button>
    </div>
  );
};
</file>

<file path="web/src/components/landing/DealFinder.tsx">
// import { Input } from '@/components/ui/input';
// import { Button } from '@/components/common/Button';
// import { Search, MapPin, Calendar, Clock } from 'lucide-react';

// export const DealFinder = () => {
//   return (
//     <div className="mx-auto mt-8 w-full max-w-4xl">
//       <div className="flex items-center gap-2 rounded-full border bg-white p-2 shadow-lg">
//         <div className="relative flex-1">
//           <MapPin className="absolute left-4 top-1/2 h-5 w-5 -translate-y-1/2 text-neutral-400" />
//           <Input
//             type="text"
//             placeholder="What are you looking for? (e.g. Pizza, Tacos...)"
//             className="h-14 border-none bg-transparent pl-12 text-base focus-visible:ring-0 focus-visible:ring-offset-0"
//           />
//         </div>
//         <div className="flex items-center gap-2">
//           <Button
//             variant="secondary"
//             size="lg"
//             className="h-14 w-14 flex-shrink-0 rounded-full p-0"
//           >
//             <Calendar className="h-5 w-5" />
//           </Button>
//           <Button
//             variant="secondary"
//             size="lg"
//             className="h-14 w-14 flex-shrink-0 rounded-full p-0"
//           >
//             <Clock className="h-5 w-5" />
//           </Button>
//         </div>
//         <Button size="lg" className="h-14 w-14 flex-shrink-0 rounded-full p-0">
//           <Search className="h-6 w-6" />
//         </Button>
//       </div>
//     </div>
//   );
// };

// web/src/components/landing/DealFinder.tsx

import { Input } from '@/components/ui/input';
import { Button } from '@/components/common/Button';
import { Search, MapPin, Briefcase } from 'lucide-react';
import { cn } from '@/lib/utils';

const tabs = [
  { id: 'deals', label: 'Deals', icon: <MapPin className="mr-2 h-5 w-5" /> },
  {
    id: 'experiences',
    label: 'Experiences',
    icon: <Briefcase className="mr-2 h-5 w-5" />,
  },
];

interface DealFinderProps {
  activeTab: string;
  onTabChange: (tabId: string) => void;
}

export const DealFinder = ({ activeTab, onTabChange }: DealFinderProps) => {
  return (
    <div className="mx-auto w-full max-w-4xl px-4 sm:px-6 lg:px-0">
      <div className="mb-2 flex justify-center">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => onTabChange(tab.id)}
            className={cn(
              'flex items-center border-b-2 px-4 py-3 font-semibold text-neutral-600 transition-all',
              activeTab === tab.id
                ? 'border-primary text-primary'
                : 'border-transparent hover:border-neutral-300',
            )}
          >
            {tab.icon} {tab.label}
          </button>
        ))}
      </div>

      <div className="w-full overflow-hidden rounded-2xl border bg-white p-2 shadow-lg lg:rounded-full">
        <div className="flex flex-col sm:flex-row sm:items-center">
          <div className="grid flex-1 grid-cols-1 md:grid-cols-3 md:divide-x md:divide-neutral-200">
            <div className="p-2 pl-4">
              <label htmlFor="where" className="block text-xs font-bold">
                Where?
              </label>
              <Input
                id="where"
                type="text"
                placeholder="Search destinations"
                className="h-auto border-none p-0 text-sm focus-visible:ring-0 focus-visible:ring-offset-0"
              />
            </div>
            <div className="p-2 pl-4">
              <label htmlFor="when" className="block text-xs font-bold">
                When?
              </label>
              <Input
                id="when"
                type="text"
                placeholder="Add dates"
                className="h-auto border-none p-0 text-sm focus-visible:ring-0 focus-visible:ring-offset-0"
              />
            </div>
            <div className="p-2 pl-4">
              <label htmlFor="who" className="block text-xs font-bold">
                Who?
              </label>
              <Input
                id="who"
                type="text"
                placeholder="Add guests"
                className="h-auto border-none p-0 text-sm focus-visible:ring-0 focus-visible:ring-offset-0"
              />
            </div>
          </div>
          <div className="p-4 sm:p-2">
            <Button
              size="lg"
              className="h-12 w-full rounded-xl sm:h-12 sm:w-12 sm:flex-shrink-0 sm:rounded-full sm:p-0"
            >
              <Search className="h-5 w-5" />
              <span className="ml-2 sm:hidden">Search</span>
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/components/landing/DiscoverSection.tsx">
// web/src/components/landing/DiscoverSection.tsx
import { DealColumn } from './DealColumn';
import { happyHourDeals, topRatedDeals, newDeals } from '@/data/deals';
import { TrendingUp, Trophy, Sparkles } from 'lucide-react';

export const DiscoverSection = () => {
  return (
    <section className="bg-neutral-50 py-8 sm:py-10 lg:py-12">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6 flex items-center justify-between sm:mb-8">
          <h2 className="text-2xl font-bold tracking-tight text-neutral-900 sm:text-3xl">
            Leaderboard
          </h2>
        </div>
        <div className="flex flex-wrap justify-center gap-6 sm:gap-8 lg:gap-12">
          <DealColumn
            title="Happy Hours"
            icon={<TrendingUp className="h-6 w-6 text-brand-primary-600" />}
            deals={happyHourDeals}
          />
          <DealColumn
            title="Top Rated"
            icon={<Trophy className="h-6 w-6 text-brand-primary-600" />}
            deals={topRatedDeals}
          />
          <DealColumn
            title="New on CitySpark"
            icon={<Sparkles className="h-6 w-6 text-brand-primary-600" />}
            deals={newDeals}
          />
        </div>
      </div>
    </section>
  );
};
</file>

<file path="web/src/components/layout/Footer.tsx">
// import { Link } from 'react-router-dom';
// import { Linkedin } from 'lucide-react';
// import { PATHS } from '@/routing/paths';
// import { Logo } from '../common/Logo';

// export const Footer = () => {
//   return (
//     <footer className="w-full border-t border-neutral-border bg-white py-8">
//       <div className="container mx-auto max-w-7xl px-6 md:px-8">
//         <div className="mb-12 grid grid-cols-2 gap-8 md:grid-cols-5">
//           <div className="col-span-2 md:col-span-2">
//             <Logo />
//             <p className="mt-4 max-w-sm text-sm leading-relaxed text-neutral-text-secondary">
//               Discover live deals and exclusive experiences from top-rated local
//               businesses. Your real-time map to the city's best moments.
//             </p>
//             <div className="mt-6">
//               <div className="inline-flex items-center gap-2 rounded-md bg-neutral-100 px-3 py-2 text-xs font-medium text-neutral-800">
//                 <div className="h-2 w-2 rounded-full bg-green-500"></div>
//                 Launching v1 soon
//               </div>
//             </div>
//           </div>

//           <div>
//             <h3 className="mb-4 font-medium text-neutral-text-primary">
//               Product
//             </h3>
//             <ul className="space-y-3">
//               <li>
//                 <Link
//                   to={PATHS.MAP}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Live Map
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.HOT_DEALS}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Hot Deals
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.PRICING}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Pricing
//                 </Link>
//               </li>
//             </ul>
//           </div>

//           <div>
//             <h3 className="mb-4 font-medium text-neutral-text-primary">
//               Business
//             </h3>
//             <ul className="space-y-3">
//               <li>
//                 <Link
//                   to={PATHS.FOR_BUSINESSES}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   For Businesses
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.BUSINESS_SIGNUP}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Claim Your Business
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.BUSINESS_DASHBOARD}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Business Login
//                 </Link>
//               </li>
//             </ul>
//           </div>

//           <div>
//             <h3 className="mb-4 font-medium text-neutral-text-primary">
//               Company
//             </h3>
//             <ul className="space-y-3">
//               <li>
//                 <Link
//                   to={PATHS.ABOUT}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   About Us
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.CONTACT}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Contact
//                 </Link>
//               </li>
//               <li>
//                 <Link
//                   to={PATHS.SUPPORT}
//                   className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//                 >
//                   Support
//                 </Link>
//               </li>
//             </ul>
//           </div>
//         </div>

//         <div className="flex flex-col items-center justify-between border-t border-neutral-border pt-8 sm:flex-row">
//           <div className="mb-4 flex flex-wrap items-center gap-x-4 gap-y-2 sm:mb-0">
//             <span className="text-center text-sm text-neutral-text-secondary sm:text-left">
//               © {new Date().getFullYear()} CitySpark All rights reserved
//             </span>
//             <span className="hidden text-neutral-border sm:inline">·</span>
//             <Link
//               to={PATHS.PRIVACY}
//               className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//             >
//               Privacy Policy
//             </Link>
//             <span className="hidden text-neutral-border sm:inline">·</span>
//             <Link
//               to={PATHS.TERMS}
//               className="text-sm text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//             >
//               Terms of Service
//             </Link>
//           </div>

//           <div className="flex items-center gap-3">
//             <a
//               href="https://twitter.com"
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//             >
//               <svg
//                 width="20"
//                 height="20"
//                 viewBox="0 0 24 24"
//                 fill="none"
//                 xmlns="http://www.w3.org/2000/svg"
//               >
//                 <path
//                   d="M18 6L6 18M6 6L18 18"
//                   stroke="currentColor"
//                   strokeWidth="2"
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                 />
//               </svg>
//             </a>
//             <a
//               href="https://linkedin.com"
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//             >
//               <Linkedin className="h-5 w-5" />
//             </a>
//           </div>
//         </div>
//       </div>
//     </footer>
//   );
// };

// web/src/components/layout/Footer.tsx

import { Logo } from '../common/Logo';
import { Twitter, Instagram, Facebook } from 'lucide-react';

const socialLinks = [
  { href: '#', icon: <Twitter className="h-5 w-5" /> },
  { href: '#', icon: <Instagram className="h-5 w-5" /> },
  { href: '#', icon: <Facebook className="h-5 w-5" /> },
];

const galleryImages = [
  'https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=400&q=80',
  'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?w=400&q=80',
  'https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?w=400&q=80',
  'https://images.unsplash.com/photo-1590846406792-0adc7f938f1d?w=400&q=80',
  'https://images.unsplash.com/photo-1529042410759-befb1204b468?w=400&q=80',
  'https://images.unsplash.com/photo-1473093295043-cdd812d0e601?w=400&q=80',
];

export const Footer = () => {
  return (
    <footer className="bg-[#222222] font-sans text-neutral-400">
      <div className="container mx-auto px-6 py-16">
        <div className="grid gap-12 text-center md:grid-cols-3 md:text-left">
          <div className="flex flex-col items-center md:items-start">
            <h3 className="mb-4 text-sm font-bold uppercase tracking-widest text-white">
              Latest News
            </h3>
            <p>
              For all the latest deals and app updates, follow us on Twitter:{' '}
              <a
                href="#"
                className="text-white transition-colors hover:text-red-400"
              >
                @CitySparkApp
              </a>
            </p>
          </div>

          <div className="flex flex-col items-center">
            <div className="mb-4">
              {/* Note: The original logo component is complex. For a dark background, a simpler one might be needed. */}
              {/* For now, we use the existing one. */}
              <Logo />
            </div>
            <p className="mb-4 max-w-xs text-center">
              Your real-time guide to the best deals and hidden gems in your
              city.
            </p>
            <div className="text-center">
              <p>+1 (234) 567-890</p>
              <p>hello@cityspark.app</p>
              <p>123 Spark Avenue, New York</p>
            </div>
            <div className="mt-6 flex justify-center gap-5">
              {socialLinks.map((link, index) => (
                <a
                  key={index}
                  href={link.href}
                  className="text-neutral-400 transition-colors hover:text-white"
                >
                  {link.icon}
                </a>
              ))}
            </div>
          </div>

          <div className="flex flex-col items-center md:items-start">
            <h3 className="mb-4 text-sm font-bold uppercase tracking-widest text-white">
              Discover Your City
            </h3>
            <div className="grid w-full max-w-xs grid-cols-3 gap-2">
              {galleryImages.map((src, index) => (
                <div
                  key={index}
                  className="aspect-square overflow-hidden bg-neutral-700"
                >
                  <img
                    src={src}
                    alt={`Gallery image ${index + 1}`}
                    className="h-full w-full object-cover"
                  />
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="border-t border-neutral-700">
        <div className="container mx-auto px-6 py-4">
          <p className="text-center text-sm text-neutral-500">
            © {new Date().getFullYear()} CitySpark. All Rights Reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};
</file>

<file path="web/src/pages/LoginPage.tsx">
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Eye, EyeOff, Mail, Lock, Loader2 } from 'lucide-react';

import { Button } from '@/components/common/Button';
import { Input } from '@/components/ui/input';

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { PATHS } from '@/routing/paths';
import { useAuth } from '@/context/useAuth';
import { loginSchema, type LoginFormValues } from '@/lib/validationSchemas';

export const LoginPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const { login, isLoggingIn } = useAuth();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: { email: '', password: '' },
  });

  const onSubmit = async (values: LoginFormValues) => {
    await login(values);
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-b from-brand-primary-light via-brand-primary-50 to-white px-4 py-24 sm:px-6 lg:px-8">
      <div className="pointer-events-none absolute inset-0 overflow-hidden">
        <div className="absolute bottom-0 left-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
        <div className="absolute bottom-0 right-[4%] top-0 w-0.5 bg-brand-primary-200/40"></div>
        <div className="absolute left-0 right-0 top-[10%] h-0.5 bg-brand-primary-200/40"></div>
      </div>

      <div className="relative z-10 w-full max-w-md">
        <div className="border-neutral-border/20 shadow-level-3 rounded-xl border bg-white/80 p-8 backdrop-blur-md">
          <div className="mb-8 text-center">
            <h1 className="text-neutral-text-primary mb-2 text-2xl font-bold">
              Welcome back
            </h1>
            <p className="text-neutral-text-secondary">
              Sign in to discover amazing deals near you
            </p>
          </div>
          <Button variant="google" size="lg" className="mb-6 w-full">
            Continue with Google
          </Button>
          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="border-neutral-border-light w-full border-t"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="text-neutral-text-secondary bg-white px-3">
                or continue with email
              </span>
            </div>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Email address
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Mail className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type="email"
                          placeholder="Enter your email"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-4 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-neutral-text-primary mb-2 block text-sm font-medium">
                      Password
                    </FormLabel>
                    <FormControl>
                      <div className="relative">
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                          <Lock className="h-5 w-5 text-brand-primary-500" />
                        </div>
                        <Input
                          type={showPassword ? 'text' : 'password'}
                          placeholder="Enter your password"
                          {...field}
                          className="border-neutral-border w-full rounded-lg border bg-white/50 py-3 pl-10 pr-12 backdrop-blur-sm transition-colors focus:border-brand-primary-main focus:ring-2 focus:ring-brand-primary-main/50"
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute inset-y-0 right-0 flex items-center pr-3"
                        >
                          {showPassword ? (
                            <EyeOff className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          ) : (
                            <Eye className="h-5 w-5 text-brand-primary-400 hover:text-brand-primary-600" />
                          )}
                        </button>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    className="border-neutral-border h-4 w-4 rounded text-brand-primary-main focus:ring-brand-primary-main/50"
                  />
                  <label
                    htmlFor="remember-me"
                    className="text-neutral-text-secondary block text-sm"
                  >
                    Remember me
                  </label>
                </div>
                <Link
                  to={PATHS.FORGOT_PASSWORD || '#'}
                  className="text-sm font-medium text-brand-primary-main hover:text-brand-primary-dark"
                >
                  Forgot password?
                </Link>
              </div>

              <Button
                type="submit"
                variant="primary"
                size="lg"
                className="w-full"
                disabled={isLoggingIn}
              >
                {isLoggingIn && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Sign in
              </Button>
            </form>
          </Form>

          <div className="mt-8 text-center">
            <p className="text-neutral-text-secondary text-sm">
              Don't have an account?{' '}
              <Link
                to={PATHS.SIGNUP}
                className="font-medium text-brand-primary-main hover:text-brand-primary-dark"
              >
                Sign up for free
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/pages/NotFoundPage.tsx">
import { Link } from 'react-router-dom';
import { Button } from '@/components/common/Button';
import { ArrowLeft, Home, Search } from 'lucide-react';
import { PATHS } from '@/routing/paths';
import { motion } from 'framer-motion';

export const NotFoundPage = () => {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-b from-brand-primary-light via-blue-50 to-white px-4 py-24 sm:px-6 lg:px-8">
      <div className="pointer-events-none absolute inset-0 overflow-hidden">
        <div className="absolute bottom-0 left-[4%] top-0 w-0.5 bg-blue-200/40"></div>
        <div className="absolute bottom-0 right-[4%] top-0 w-0.5 bg-blue-200/40"></div>
        <div className="absolute left-0 right-0 top-[10%] h-0.5 bg-blue-200/40"></div>

        <motion.div
          animate={{
            y: [0, -10, 0],
            rotate: [0, 5, 0],
          }}
          transition={{
            duration: 6,
            repeat: Infinity,
            ease: 'easeInOut',
          }}
          className="absolute left-4 top-20 h-12 w-12 rounded-full bg-brand-primary-200 opacity-60 sm:left-10 sm:h-16 sm:w-16"
        />
        <motion.div
          animate={{
            y: [0, 15, 0],
            rotate: [0, -8, 0],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: 'easeInOut',
            delay: 1,
          }}
          className="bg-accent-orange-100 absolute right-8 top-40 h-10 w-10 rounded-lg opacity-50 sm:right-16 sm:h-12 sm:w-12"
        />
        <motion.div
          animate={{
            y: [0, -20, 0],
            x: [0, 10, 0],
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            ease: 'easeInOut',
            delay: 2,
          }}
          className="absolute bottom-32 left-8 h-6 w-6 rounded-full bg-brand-primary-200 opacity-40 sm:left-20 sm:h-8 sm:w-8"
        />
      </div>

      <div className="relative z-10 w-full max-w-2xl text-center">
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: 'easeOut' }}
          className="mb-8"
        >
          <div className="relative mx-auto mb-8 h-48 w-48 sm:h-64 sm:w-64">
            <motion.div
              animate={{
                y: [0, -15, 0],
                rotate: [0, 2, 0],
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: 'easeInOut',
              }}
              className="absolute inset-0 flex items-center justify-center"
            >
              <div className="scale-[2.5] transform text-brand-primary-500 sm:scale-[3] md:scale-[4]">
                <svg
                  viewBox="0 0 24 24"
                  className="h-12 w-12 sm:h-16 sm:w-16"
                  fill="currentColor"
                >
                  <path d="M12 2L13.09 8.26L19 7L14.74 12L19 17L13.09 15.74L12 22L10.91 15.74L5 17L9.26 12L5 7L10.91 8.26L12 2Z" />
                </svg>

                <div className="absolute -bottom-6 left-1/2 h-12 w-24 -translate-x-1/2 transform rounded-full bg-brand-primary-400 opacity-30 blur-xl sm:-bottom-8 sm:h-16 sm:w-32"></div>
                <div className="w-18 absolute -bottom-3 left-1/2 h-6 -translate-x-1/2 transform rounded-full bg-brand-primary-300 opacity-50 blur-lg sm:-bottom-4 sm:h-8 sm:w-24"></div>
              </div>
            </motion.div>

            <motion.div
              animate={{
                scale: [1, 1.2, 1],
                opacity: [0.5, 1, 0.5],
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: 'easeInOut',
              }}
              className="absolute left-2 top-2 h-1.5 w-1.5 rounded-full bg-brand-primary-400 sm:left-4 sm:top-4 sm:h-2 sm:w-2"
            />
            <motion.div
              animate={{
                scale: [1, 1.3, 1],
                opacity: [0.3, 0.8, 0.3],
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: 'easeInOut',
                delay: 0.5,
              }}
              className="bg-accent-orange-400 absolute right-4 top-8 h-1 w-1 rounded-full sm:right-8 sm:top-12 sm:h-1.5 sm:w-1.5"
            />
            <motion.div
              animate={{
                scale: [1, 1.1, 1],
                opacity: [0.4, 0.9, 0.4],
              }}
              transition={{
                duration: 2.5,
                repeat: Infinity,
                ease: 'easeInOut',
                delay: 1,
              }}
              className="bg-accent-purple-400 absolute bottom-4 left-6 h-1.5 w-1.5 rounded-full sm:bottom-8 sm:left-12 sm:h-2 sm:w-2"
            />
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <p className="text-neutral-text-secondary mb-4 text-sm font-medium">
            You look a little lost...
          </p>

          <h1 className="text-neutral-text-primary mb-6 text-3xl font-bold leading-tight sm:text-4xl md:text-6xl">
            Oops! Page not found
          </h1>

          <p className="text-neutral-text-secondary mx-auto mb-8 max-w-md px-4 text-base sm:px-0 sm:text-lg">
            The page you're looking for doesn't exist. Let's get you back on
            track to discover amazing deals near you.
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="flex flex-col items-center justify-center gap-4 sm:flex-row"
        >
          <Link to={PATHS.HOME}>
            <Button
              variant="primary"
              size="lg"
              icon={<Home className="h-5 w-5" />}
              iconPosition="left"
              className="w-full sm:min-w-[200px]"
            >
              Back to Home
            </Button>
          </Link>

          <Link to={PATHS.ALL_DEALS}>
            <Button
              variant="secondary"
              size="lg"
              icon={<Search className="h-5 w-5" />}
              iconPosition="left"
              className="w-full sm:min-w-[200px]"
            >
              Browse Hot Deals
            </Button>
          </Link>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="mx-auto mt-12 grid max-w-lg grid-cols-1 gap-6 md:grid-cols-2"
        >
          <Link
            to={PATHS.HOME}
            className="border-neutral-border/20 group rounded-xl border bg-white/60 p-6 backdrop-blur-sm transition-all duration-300 hover:-translate-y-1 hover:bg-white/80 hover:shadow-lg"
          >
            <div className="mb-3 flex items-center gap-3">
              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-brand-primary-100 transition-colors group-hover:bg-brand-primary-200">
                <Home className="h-5 w-5 text-brand-primary-600" />
              </div>
              <div className="text-left">
                <h3 className="text-neutral-text-primary font-semibold">
                  Home Page
                </h3>
                <p className="text-neutral-text-secondary text-sm">
                  There's no place like home...
                </p>
              </div>
            </div>
            <ArrowLeft className="text-neutral-text-secondary group-hover:text-neutral-text-primary ml-auto h-4 w-4 transition-colors" />
          </Link>

          <Link
            to={PATHS.ALL_DEALS}
            className="border-neutral-border/20 group rounded-xl border bg-white/60 p-6 backdrop-blur-sm transition-all duration-300 hover:-translate-y-1 hover:bg-white/80 hover:shadow-lg"
          >
            <div className="mb-3 flex items-center gap-3">
              <div className="bg-accent-orange-100 group-hover:bg-accent-orange-200 flex h-10 w-10 items-center justify-center rounded-lg transition-colors">
                <Search className="text-accent-orange-600 h-5 w-5" />
              </div>
              <div className="text-left">
                <h3 className="text-neutral-text-primary font-semibold">
                  Hot Deals
                </h3>
                <p className="text-neutral-text-secondary text-sm">
                  Where we talk the talk
                </p>
              </div>
            </div>
            <ArrowLeft className="text-neutral-text-secondary group-hover:text-neutral-text-primary ml-auto h-4 w-4 transition-colors" />
          </Link>
        </motion.div>
      </div>
    </div>
  );
};
</file>

<file path="web/src/styles/global.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Poppins:wght@600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 215.4 16.3% 46.9%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 215.4 16.3% 46.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.75rem;

    /* YOUR BRAND.PRIMARY PALETTE - THE SINGLE SOURCE OF TRUTH */
    --brand-primary-main: 221 83.2% 53.3%; /* Corresponds to -600 */
    --brand-primary-dark: 221 76.8% 47.1%; /* Corresponds to -700 */
    --brand-primary-light: 220 89.5% 92.7%;

    --brand-primary-50: 220 89.5% 96.1%;
    --brand-primary-100: 220 89.5% 92.7%;
    --brand-primary-200: 220 89.5% 86.1%;
    --brand-primary-300: 220 89.5% 76.1%;
    --brand-primary-400: 220 89.5% 66.1%;
    --brand-primary-500: 220 89.5% 56.1%;
    --brand-primary-600: 221 83.2% 53.3%;
    --brand-primary-700: 221 76.8% 47.1%;
    --brand-primary-800: 220 89.5% 26.1%;
    --brand-primary-900: 220 89.5% 16.1%;
  }

  .dark {
    --background: 222.2222 47.3684% 11.1765%;
    --foreground: 210 40% 98.0392%;
    --card: 222.2222 47.3684% 11.1765%;
    --card-foreground: 210 40% 98.0392%;
    --popover: 222.2222 47.3684% 11.1765%;
    --popover-foreground: 210 40% 98.0392%;
    --primary: 217.2193 91.2195% 59.8039%;
    --primary-foreground: 0 0% 100%;
    --secondary: 217.2414 32.5843% 17.451%;
    --secondary-foreground: 210 40% 98.0392%;
    --muted: 217.2414 32.5843% 17.451%;
    --muted-foreground: 215 20.2247% 65.098%;
    --accent: 217.2414 32.5843% 17.451%;
    --accent-foreground: 210 40% 98.0392%;
    --destructive: 0 84.2365% 60.1961%;
    --destructive-foreground: 210 40% 98.0392%;
    --border: 217.2414 32.5843% 17.451%;
    --input: 217.2414 32.5843% 17.451%;
    --ring: 217.2193 91.2195% 59.8039%;
    --radius: 0.75rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  /* h1, h2, h3, h4, h5, h6 {
    @apply font-heading;
  } */
  body {
    @apply bg-background text-foreground antialiased;
    font-feature-settings:
      'rlig' 1,
      'calt' 1;
  }
}

@layer utilities {
  .scrollbar-hide {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
}
</file>

<file path="web/src/components/common/Button.tsx">
import { forwardRef, type ButtonHTMLAttributes, type ReactNode } from 'react';
import { cn } from '@/lib/utils';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'google' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  asChild?: boolean;
  icon?: ReactNode;
  iconPosition?: 'left' | 'right';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant = 'primary',
      size = 'md',
      icon,
      iconPosition = 'left',
      children,
      ...props
    },
    ref,
  ) => {
    const baseClasses =
      'inline-flex items-center justify-center whitespace-nowrap rounded-full font-medium ring-offset-white transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary-main/50 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50';

    const variantClasses = {
      primary:
        'bg-gradient-to-b from-brand-primary-400 to-brand-primary-600 text-white hover:from-brand-primary-500 hover:to-brand-primary-700 transition-all duration-200',
      secondary:
        'bg-gradient-to-b from-white to-neutral-50 border border-brand-primary-200 hover:border-brand-primary-300 hover:from-brand-primary-50 transition-all duration-200 font-semibold',
      google:
        'bg-white text-neutral-text-primary border border-neutral-border hover:bg-neutral-subtle-background shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-200',
      ghost:
        'bg-transparent text-neutral-text-secondary hover:text-neutral-text-primary hover:bg-neutral-subtle-background',
    };

    const sizeClasses = {
      sm: 'h-8 px-3 text-sm gap-1.5',
      md: 'h-10 px-4 text-sm gap-2',
      lg: 'h-12 px-6 text-base gap-2',
    };

    const GoogleIcon = () => (
      <svg
        className="h-4 w-4"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
          fill="#4285F4"
        />
        <path
          d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
          fill="#34A853"
        />
        <path
          d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
          fill="#FBBC05"
        />
        <path
          d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
          fill="#EA4335"
        />
      </svg>
    );

    const renderIcon = () => {
      if (variant === 'google') return <GoogleIcon />;
      if (icon) return icon;
      return null;
    };

    const iconElement = renderIcon();

    return (
      <button
        className={cn(
          baseClasses,
          variantClasses[variant],
          sizeClasses[size],
          className,
        )}
        ref={ref}
        {...props}
      >
        {iconPosition === 'left' && iconElement}
        {children}
        {iconPosition === 'right' && iconElement}
      </button>
    );
  },
);

Button.displayName = 'Button';

export { Button, type ButtonProps };
</file>

<file path="web/src/components/landing/DealColumn.tsx">
// web/src/components/landing/DealColumn.tsx
import { Link } from 'react-router-dom';
import { DealCard } from './DealCard';
import { Button } from '@/components/common/Button';
import { PATHS } from '@/routing/paths';
import type { Deal } from '@/data/deals';

interface DealColumnProps {
  title: string;
  icon: React.ReactNode;
  deals: Deal[];
}

export const DealColumn = ({ title, icon, deals }: DealColumnProps) => {
  return (
    <div className="flex h-[600px] min-w-[300px] max-w-[400px] flex-1 flex-col rounded-2xl border border-neutral-200/80 bg-white shadow-md">
      <div className="relative flex-shrink-0 py-6 text-center">
        <div className="absolute -top-6 left-1/2 -translate-x-1/2">
          <div className="flex h-12 w-12 items-center justify-center rounded-full bg-white shadow-lg">
            {icon}
          </div>
        </div>
        <h3 className="text-xl font-bold tracking-tight text-neutral-900 sm:text-2xl">
          {title}
        </h3>
      </div>
      <div className="flex-1 overflow-hidden px-4 pb-4">
        <div className="scrollbar-hide h-full divide-y divide-neutral-200/60 overflow-y-auto">
          {deals.map((deal) => (
            <DealCard key={deal.id} deal={deal} />
          ))}
        </div>
      </div>
      <div className="flex-shrink-0 border-t border-neutral-200/60 p-4 text-center">
        <Link to={PATHS.ALL_DEALS}>
          <Button variant="secondary" size="md" className="font-semibold">
            See All
          </Button>
        </Link>
      </div>
    </div>
  );
};
</file>

<file path="web/src/data/deals.ts">
export interface Deal {
  id: string;
  name: string;
  image: string;
  rating: number;
  category: string;
  price: '$$' | '$$$' | '$';
  location: string;
  tag?: string;

  // --- NEW DEAL-SPECIFIC FIELDS ---
  dealType?: 'Discount' | 'Happy Hour' | 'Kickback';
  dealValue?: string; // e.g., "50% OFF", "$5 Per Friend"
  originalValue?: number;
  discountValue?: number;
  expiresAt?: string; // ISO String for countdown timer
}

// Function to get a future date for mock data
const getFutureDate = (hours: number) =>
  new Date(Date.now() + hours * 60 * 60 * 1000).toISOString();

export const premiumDeals: Deal[] = [
  {
    id: 'pd1',
    name: 'Echoes Living Room',
    image:
      'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=500&q=80',
    rating: 4.6,
    category: 'Lounge',
    price: '$$$',
    location: 'GTB Nagar',
    tag: 'Guest Favourite',
    dealType: 'Happy Hour',
    dealValue: '2-for-1 Drinks',
    expiresAt: getFutureDate(3), // Expires in 3 hours
  },
  {
    id: 'pd2',
    name: 'The Irish House',
    image:
      'https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=400&q=80',
    rating: 4.4,
    category: 'Bar',
    price: '$$',
    location: 'Cyber Hub',
    tag: 'Top Rated',
    dealType: 'Discount',
    dealValue: '50% OFF',
    originalValue: 50,
    discountValue: 25,
    expiresAt: getFutureDate(26), // Expires in 26 hours
  },
  {
    id: 'pd3',
    name: 'Social',
    image:
      'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?w=400&q=80',
    rating: 4.1,
    category: 'Cafe',
    price: '$$',
    location: 'Hauz Khas',
    dealType: 'Kickback',
    dealValue: '$5 Per Friend',
    expiresAt: getFutureDate(72), // Expires in 3 days
  },
  {
    id: 'pd4',
    name: 'Mai Bao',
    image:
      'https://images.unsplash.com/photo-1585518419759-7fe2e0fbf8a6?w=500&q=80',
    rating: 4.0,
    category: 'Asian',
    price: '$',
    location: 'Saket',
    tag: 'New Deal',
    dealType: 'Discount',
    dealValue: '30% OFF',
    originalValue: 25,
    discountValue: 7.5,
    expiresAt: getFutureDate(8),
  },
];

// Export arrays for homepage use - all using premiumDeals
export const topRatedDeals: Deal[] = premiumDeals;
export const happyHourDeals: Deal[] = premiumDeals.filter(
  (d) => d.dealType === 'Happy Hour',
);
export const experiencesData: Deal[] = premiumDeals;
export const newDeals: Deal[] = premiumDeals;
export const bookTonightDeals: Deal[] = premiumDeals;

// For the /deals page - extended interface with additional fields
export interface DealWithLocation extends Deal {
  position: [number, number];
  description: string;
  originalPrice: number;
  discountedPrice: number;
  bookingInfo: string;
}

export const allDeals: DealWithLocation[] = [
  {
    id: 'ad1',
    name: 'Cafe Hawkers',
    image:
      'https://images.unsplash.com/photo-1559925393-8be0ec4767c8?w=500&q=80',
    rating: 4.1,
    category: 'Cafe',
    price: '$$',
    location: 'Connaught Place',
    position: [40.7128, -74.006],
    description:
      "Today's special brew is 50% off until 4 PM. Unlock to reveal!",
    originalPrice: 12559,
    discountedPrice: 11659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Discount',
    dealValue: '50% OFF',
    originalValue: 20,
    discountValue: 10,
    expiresAt: getFutureDate(4),
  },
  {
    id: 'ad2',
    name: 'Out Of The Box Courtyard',
    image:
      'https://images.unsplash.com/photo-1590846406792-0adc7f938f1d?w=500&q=80',
    rating: 4.3,
    category: 'Multi-cuisine',
    price: '$$$',
    location: 'Connaught Place',
    position: [40.7145, -74.0082],
    description:
      'Enjoy a free dessert with any main course. Perfect for a sunny afternoon.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Happy Hour',
    dealValue: 'Free Dessert',
    expiresAt: getFutureDate(12),
  },
  {
    id: 'ad3',
    name: 'Echoes Living Room',
    image:
      'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=500&q=80',
    rating: 4.6,
    category: 'Lounge',
    price: '$$$',
    location: 'GTB Nagar',
    position: [40.7295, -73.9965],
    description:
      'Happy Hour specials on all imported drinks from 5 PM to 7 PM.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Happy Hour',
    dealValue: '2-for-1 Drinks',
    expiresAt: getFutureDate(3),
  },
  {
    id: 'ad4',
    name: 'Mai Bao',
    image:
      'https://images.unsplash.com/photo-1585518419759-7fe2e0fbf8a6?w=500&q=80',
    rating: 4.0,
    category: 'Asian',
    price: '$',
    location: 'Saket',
    position: [40.723, -73.993],
    description: 'Quick lunch deal: Get a bao trio for the price of two.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Discount',
    dealValue: '30% OFF',
    originalValue: 25,
    discountValue: 7.5,
    expiresAt: getFutureDate(8),
  },
  {
    id: 'ad5',
    name: "The Passenger's Bar",
    image:
      'https://images.unsplash.com/photo-1543007631-283050bb3e8c?w=500&q=80',
    rating: 2.9,
    category: 'Bar',
    price: '$$',
    location: 'Kailash Colony',
    position: [40.731, -74.0055],
    description:
      'Live music tonight! No cover charge. Check in for a complimentary shooter.',
    originalPrice: 11659,
    discountedPrice: 10659,
    bookingInfo: "Sorry, we don't currently have any tables available for 2.",
    dealType: 'Kickback',
    dealValue: 'Free Entry',
    expiresAt: getFutureDate(18),
  },
];
</file>

<file path="web/package.json">
{
  "name": "web",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "preview": "vite preview",
    "test": "jest"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.1.1",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-toast": "^1.2.14",
    "@tanstack/react-query": "^5.83.0",
    "@tanstack/react-query-devtools": "^5.83.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.0.0",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.417.0",
    "radix-ui": "^1.4.2",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.62.0",
    "react-leaflet": "^5.0.0",
    "react-router-dom": "^7.7.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.0.5"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@eslint/js": "^9.30.1",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/leaflet": "^1.9.20",
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.3",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "jest": "^30.0.5",
    "jest-environment-jsdom": "^30.0.5",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "tailwindcss": "^3.4.17",
    "ts-jest": "^29.4.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}
</file>

<file path="web/src/App.tsx">
import { BrowserRouter, Routes, Route, Outlet } from 'react-router-dom';
import { HomePage } from './pages/HomePage';
import { LoginPage } from './pages/LoginPage';
import { SignUpPage } from './pages/SignUpPage';
import { ProfilePage } from './pages/ProfilePage';
import { AboutPage } from './pages/AboutPage';
import { ForBusinessesPage } from './pages/ForBusinessesPage';
import { PrivacyPage } from './pages/PrivacyPage';
import { TermsPage } from './pages/TermsPage';
import { NotFoundPage } from './pages/NotFoundPage';
import { Header } from './components/layout/Header';
import { Footer } from './components/layout/Footer';
import { MerchantLayout } from './components/layout/MerchantLayout';
import { ProtectedRoute } from './routing/ProtectedRoute';
import { PATHS } from './routing/paths';
import { Toaster } from '@/components/ui/toaster';
import { AuthProvider } from './context/AuthContext';
import { AllDealsPage } from './pages/AllDealsPage';
import { MerchantOnboardingPage } from './pages/merchant/MerchantOnboardingPage';
import { MerchantDashboardPage } from './pages/merchant/MerchantDashboardPage';
import { CreateDealPage } from './pages/merchant/DealCreatePage';

// Helper for default layout
const DefaultLayout = () => (
  <>
    <Header />
    <main>
      <Outlet />
    </main>
    <Footer />
  </>
);

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <Routes>
          {/* Public Routes */}
          <Route element={<DefaultLayout />}>
            <Route path={PATHS.HOME} element={<HomePage />} />
            <Route path={PATHS.LOGIN} element={<LoginPage />} />
            <Route path={PATHS.SIGNUP} element={<SignUpPage />} />
            <Route path={PATHS.PROFILE} element={<ProfilePage />} />
            <Route path={PATHS.ABOUT} element={<AboutPage />} />
            <Route path={PATHS.ALL_DEALS} element={<AllDealsPage />} />
            <Route
              path={PATHS.FOR_BUSINESSES}
              element={<ForBusinessesPage />}
            />
            <Route path={PATHS.PRIVACY} element={<PrivacyPage />} />
            <Route path={PATHS.TERMS} element={<TermsPage />} />
          </Route>

          {/* Merchant Protected Routes */}
          <Route element={<ProtectedRoute />}>
            <Route element={<MerchantLayout />}>
              <Route
                path={PATHS.MERCHANT_DASHBOARD}
                element={<MerchantDashboardPage />}
              />
              <Route
                path="/merchant/deals/create/*"
                element={<CreateDealPage />}
              />
              <Route
                path="/merchant/onboarding/*"
                element={<MerchantOnboardingPage />}
              />
            </Route>
          </Route>

          {/* Catch-all route for 404 */}
          <Route path={PATHS.NOT_FOUND} element={<NotFoundPage />} />
        </Routes>
        <Toaster />
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;
</file>

<file path="web/tailwind.config.ts">
import type { Config } from 'tailwindcss';
import tailwindcssAnimate from 'tailwindcss-animate';

const tailwindConfig: Config = {
  darkMode: ['class'],
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--brand-primary-main))', // Uses your main blue
          foreground: 'hsl(var(--primary-foreground, 0 0% 100%))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
          orange: '#F97316',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        brand: {
          primary: {
            main: 'hsl(var(--brand-primary-main))',
            dark: 'hsl(var(--brand-primary-dark))',
            light: 'hsl(var(--brand-primary-light))',
            50: 'hsl(var(--brand-primary-50))',
            100: 'hsl(var(--brand-primary-100))',
            200: 'hsl(var(--brand-primary-200))',
            300: 'hsl(var(--brand-primary-300))',
            400: 'hsl(var(--brand-primary-400))',
            500: 'hsl(var(--brand-primary-500))',
            600: 'hsl(var(--brand-primary-600))',
            700: 'hsl(var(--brand-primary-700))',
            800: 'hsl(var(--brand-primary-800))',
            900: 'hsl(var(--brand-primary-900))',
          },
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 4px)',
        sm: 'calc(var(--radius) - 8px)',
      },
      boxShadow: {
        sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
        DEFAULT:
          '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
        md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
        lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
        xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
        '2xl': '0 25px 50px -12px rgb(0 0 0 / 0.25)',
        inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [tailwindcssAnimate],
};

export default tailwindConfig;
</file>

<file path="web/src/components/landing/HeroSection.tsx">
// import { DashboardPreview } from './DashboardPreview';
// import { HeroBackground } from './HeroBackground';
// import { DynamicHeadline } from './DynamicHeadline';
// import { HeroCallToAction } from './HeroCallToAction';
// import { motion } from 'framer-motion';

// export const HeroSection = () => {
//   return (
//     <section className="relative min-h-screen w-full overflow-hidden bg-gradient-to-b from-brand-primary-light via-brand-primary-50 to-white pt-20">
//       <HeroBackground />

//       <motion.div
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ duration: 0.8, ease: [0.25, 1, 0.5, 1] }}
//         className="container relative z-10 mx-auto max-w-5xl px-4 py-16 text-center sm:px-6 sm:py-20"
//       >
//         <div className="mx-auto max-w-4xl">
//           <DynamicHeadline />
//           <p className="mx-auto mt-6 max-w-2xl px-4 text-lg leading-relaxed text-neutral-text-primary sm:mt-8 sm:px-0 sm:text-xl">
//             Stop scrolling endless review sites. CitySpark shows you a live map
//             of exclusive deals and happy hours from top-rated local spots, ready
//             for you right now.
//           </p>
//         </div>

//         <HeroCallToAction />
//       </motion.div>
//       <DashboardPreview />
//     </section>
//   );
// };
</file>

<file path="web/src/components/layout/Header.tsx">
// import { Link } from 'react-router-dom';
// import { ChevronDown, Menu, X } from 'lucide-react';
// import { useState, useEffect } from 'react';
// import { Button } from '@/components/common/Button';
// import { ArrowRight } from 'lucide-react';
// import { PATHS } from '@/routing/paths';
// import { Logo } from '../common/Logo';
// import { motion, AnimatePresence } from 'framer-motion';
// import { useAuth } from '@/context/useAuth';
// import { ProfileDropDown } from './ProfileDropDown';

// const navigationItems = [
//   {
//     id: 'hotDeals',
//     label: 'Hot Deals',
//     path: PATHS.HOT_DEALS,
//     hasDropdown: true,
//   },
//   {
//     id: 'map',
//     label: 'Maps',
//     path: PATHS.MAP,
//     hasDropdown: false,
//   },
//   {
//     id: 'pricing',
//     label: 'Pricing',
//     path: PATHS.PRICING,
//     hasDropdown: false,
//   },
// ];

// const ctaButtons = [
//   {
//     id: 'login',
//     label: 'Login',
//     variant: 'google' as const,
//     path: PATHS.LOGIN,
//     showOnMobile: true,
//     showOnDesktop: true,
//   },
//   {
//     id: 'business',
//     label: 'For Businesses',
//     variant: 'primary' as const,
//     path: PATHS.FOR_BUSINESSES,
//     icon: <ArrowRight className="h-4 w-4" />,
//     iconPosition: 'right' as const,
//     showOnMobile: true,
//     showOnDesktop: true,
//   },
// ];

// export const Header = () => {
//   const [isScrolled, setIsScrolled] = useState(false);
//   const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
//   const { user, isLoadingUser } = useAuth();

//   const loginButton = ctaButtons.find(b => b.id === 'login');

//   useEffect(() => {
//     const handleScroll = () => {
//       setIsScrolled(window.scrollY > 20);
//     };

//     window.addEventListener('scroll', handleScroll);
//     return () => window.removeEventListener('scroll', handleScroll);
//   }, []);

//   return (
//     <header
//       className={`fixed top-0 z-50 w-full transition-all duration-300 ${isScrolled || isMobileMenuOpen
//           ? 'border-b border-neutral-border-light bg-white/50 backdrop-blur-lg'
//           : 'bg-transparent'
//         }`}
//     >
//       <div className="container mx-auto flex h-16 max-w-6xl items-center justify-between px-4 sm:px-6">
//         <Logo />

//         <nav className="hidden items-center gap-8 lg:flex">
//           {navigationItems.map((item) => (
//             <Link
//               key={item.id}
//               to={item.path}
//               className="flex items-center gap-1 text-sm font-medium text-neutral-text-secondary transition-colors hover:text-neutral-text-primary"
//             >
//               {item.label}
//               {item.hasDropdown && <ChevronDown className="h-4 w-4" />}
//             </Link>
//           ))}
//         </nav>

//         <div className="hidden items-center gap-3 lg:flex">
//           {isLoadingUser ? (
//             <div className="h-10 w-24 bg-neutral-200 animate-pulse rounded-full" />
//           ) : user ? (
//             <ProfileDropDown />
//           ) : (
//             loginButton && (
//               <Link to={loginButton.path}>
//                 <Button variant={loginButton.variant} size="md">
//                   {loginButton.label}
//                 </Button>
//               </Link>
//             )
//           )}

//           <Link to={PATHS.FOR_BUSINESSES}>
//             <Button variant="primary" size="md" icon={<ArrowRight className="h-4 w-4" />} iconPosition="right">
//               For Businesses
//             </Button>
//           </Link>
//         </div>

//         <div className="lg:hidden">
//           <button
//             onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
//             className="p-2"
//           >
//             {isMobileMenuOpen ? (
//               <X className="h-6 w-6 text-neutral-text-primary" />
//             ) : (
//               <Menu className="h-6 w-6 text-neutral-text-primary" />
//             )}
//           </button>
//         </div>
//       </div>

//       <AnimatePresence>
//         {isMobileMenuOpen && (
//           <motion.div
//             initial={{ opacity: 0, y: -20 }}
//             animate={{ opacity: 1, y: 0 }}
//             exit={{ opacity: 0, y: -20 }}
//             transition={{ duration: 0.2 }}
//             className="absolute left-0 top-full w-full border-b border-neutral-border-light bg-white/95 shadow-md backdrop-blur-md lg:hidden"
//             onClick={() => setIsMobileMenuOpen(false)}
//           >
//             <div className="mx-auto max-w-6xl px-4 py-6 sm:px-6">
//               <nav className="flex flex-col gap-6">
//                 {navigationItems.map((item) => (
//                   <Link
//                     key={item.id}
//                     to={item.path}
//                     className="flex items-center gap-2 text-lg font-medium text-neutral-text-primary"
//                     onClick={() => setIsMobileMenuOpen(false)}
//                   >
//                     {item.label}
//                     {item.hasDropdown && <ChevronDown className="h-4 w-4" />}
//                   </Link>
//                 ))}
//               </nav>
//               <div className="mt-6 space-y-3 border-t border-neutral-border-light/80 pt-6">
//                 {isLoadingUser ? (
//                   <div className="h-12 w-full bg-neutral-200 animate-pulse rounded-full" />
//                 ) : user ? (
//                   <ProfileDropDown />
//                 ) : (
//                   loginButton && (
//                     <Link to={loginButton.path} className="block">
//                       <Button
//                         variant={loginButton.variant}
//                         size="lg"
//                         className="w-full"
//                         onClick={() => setIsMobileMenuOpen(false)}
//                       >
//                         {loginButton.label}
//                       </Button>
//                     </Link>
//                   )
//                 )}
//                 <Link to={PATHS.FOR_BUSINESSES} className="block">
//                   <Button
//                     variant="primary"
//                     size="lg"
//                     className="w-full"
//                     icon={<ArrowRight className="h-4 w-4" />}
//                     iconPosition="right"
//                     onClick={() => setIsMobileMenuOpen(false)}
//                   >
//                     For Businesses
//                   </Button>
//                 </Link>
//               </div>
//             </div>
//           </motion.div>
//         )}
//       </AnimatePresence>
//     </header>
// )}

import { Link } from 'react-router-dom';
import { Menu, X } from 'lucide-react';
import { useState, useEffect } from 'react';
import { Button } from '@/components/common/Button';
import { PATHS } from '@/routing/paths';
import { Logo } from '../common/Logo';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '@/context/useAuth';
import { ProfileDropDown } from './ProfileDropDown';
import { NavbarSearch } from './NavbarSearch';
import { SearchModal } from './SearchModal';
import { useMerchantStatus } from '@/hooks/useMerchantStatus';

const navigationItems = [
  { id: 'deals', label: 'Hot Deals', path: PATHS.ALL_DEALS },
  { id: 'map', label: 'Map', path: PATHS.MAP },
  { id: 'pricing', label: 'Pricing', path: PATHS.PRICING },
];

export const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false); // <-- NEW STATE
  const { user, isLoadingUser } = useAuth();
  const { data: merchantData } = useMerchantStatus();

  // Check if user has a merchant profile (any status)
  const hasMerchantProfile = !!merchantData?.data?.merchant;

  const openSearchModal = () => setIsSearchModalOpen(true);
  const closeSearchModal = () => setIsSearchModalOpen(false);

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 100);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const motionVariants = {
    initial: { opacity: 0, y: -20 },
    animate: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.3, ease: 'easeInOut' },
    },
    exit: {
      opacity: 0,
      y: -20,
      transition: { duration: 0.2, ease: 'easeInOut' },
    },
  };

  return (
    <>
      {/* <header
        className={`fixed top-0 z-40 w-full border-b border-neutral-200/70 bg-white/80 backdrop-blur-lg transition-colors duration-300`}
      > */}
      <header
        className={`fixed top-0 z-40 w-full border-b border-neutral-200/80 bg-white/95 backdrop-blur-lg`}
      >
        <div className="container mx-auto flex h-20 max-w-screen-xl items-center justify-between px-6 lg:grid lg:grid-cols-3">
          <div className="flex justify-start">
            <Logo />
          </div>

          <div className="hidden justify-center lg:flex">
            <AnimatePresence mode="wait">
              {isScrolled ? (
                <motion.div key="search" {...motionVariants}>
                  <NavbarSearch onClick={openSearchModal} />{' '}
                  {/* <-- PASS ONCLICK */}
                </motion.div>
              ) : (
                <motion.nav key="tabs" {...motionVariants}>
                  <div className="flex items-center gap-2 rounded-full border border-neutral-200/90 bg-white/50 p-1 shadow-sm">
                    {navigationItems.map((item) => (
                      <Link
                        key={item.id}
                        to={item.path}
                        className="rounded-full px-4 py-2 text-sm font-semibold text-neutral-700 transition-colors hover:bg-neutral-100"
                      >
                        {item.label}
                      </Link>
                    ))}
                  </div>
                </motion.nav>
              )}
            </AnimatePresence>
          </div>

          <div className="hidden items-center justify-end gap-2 lg:flex">
            <Link
              to={
                hasMerchantProfile
                  ? PATHS.MERCHANT_DASHBOARD
                  : PATHS.MERCHANT_ONBOARDING
              }
            >
              <Button variant="secondary" size="md" className="rounded-full">
                {hasMerchantProfile
                  ? 'Business Dashboard'
                  : 'CitySpark for Business'}
              </Button>
            </Link>
            {isLoadingUser ? (
              <div className="h-10 w-24 animate-pulse rounded-full bg-neutral-200" />
            ) : user ? (
              <ProfileDropDown />
            ) : (
              <Link to={PATHS.LOGIN}>
                <Button variant="primary" size="md" className="rounded-full">
                  Log in
                </Button>
              </Link>
            )}
          </div>

          <div className="flex justify-end lg:hidden">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="-mr-2 p-2"
              aria-label="Open menu"
            >
              <Menu className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Mobile Menu Panel */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <div className="absolute inset-x-0 top-0 z-50 origin-top-right p-2 transition lg:hidden">
              <div className="divide-y-2 divide-gray-50 rounded-lg bg-white shadow-lg ring-1 ring-black ring-opacity-5">
                <div className="px-5 pb-6 pt-5">
                  <div className="flex items-center justify-between">
                    <Logo />
                    <div className="-mr-2">
                      <button
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="inline-flex items-center justify-center rounded-md bg-white p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary"
                        aria-label="Close menu"
                      >
                        <X className="h-6 w-6" />
                      </button>
                    </div>
                  </div>
                  <div className="mt-6">
                    <nav className="grid gap-y-8">
                      {navigationItems.map((item) => (
                        <Link
                          key={item.id}
                          to={item.path}
                          className="-m-3 flex items-center rounded-md p-3 hover:bg-gray-50"
                        >
                          <span className="ml-3 text-base font-medium text-gray-900">
                            {item.label}
                          </span>
                        </Link>
                      ))}
                    </nav>
                  </div>
                </div>
                <div className="space-y-6 px-5 py-6">
                  <div>
                    <Link
                      to={PATHS.LOGIN}
                      className="flex w-full items-center justify-center"
                    >
                      <Button
                        variant="primary"
                        size="md"
                        className="rounded-full"
                      >
                        Sign up / Log in
                      </Button>
                    </Link>
                    <p className="mt-6 text-center text-base font-medium text-gray-500">
                      {hasMerchantProfile ? (
                        <>
                          Manage your business{' '}
                          <Link
                            to={PATHS.MERCHANT_DASHBOARD}
                            className="text-primary hover:text-primary/90"
                          >
                            Go to Dashboard
                          </Link>
                        </>
                      ) : (
                        <>
                          Are you a business owner?{' '}
                          <Link
                            to={PATHS.MERCHANT_ONBOARDING}
                            className="text-primary hover:text-primary/90"
                          >
                            Get on the map
                          </Link>
                        </>
                      )}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </AnimatePresence>
      </header>

      <SearchModal isOpen={isSearchModalOpen} onClose={closeSearchModal} />
    </>
  );
};
</file>

<file path="web/src/pages/HomePage.tsx">
import { useState } from 'react';
import { DealFinder } from '@/components/landing/DealFinder';
import { SectionDivider } from '@/components/common/SectionDivider';
import { ContentCarousel } from '@/components/common/ContentCarousel';
import { CarouselSkeleton } from '@/components/common/DealCardSkeleton';
import { useQuery } from '@tanstack/react-query';
import { apiGet } from '@/services/api';
import type { Deal } from '@/data/deals'; 
import { DiscoverSection } from '@/components/landing/DiscoverSection';
import { premiumDeals, happyHourDeals, experiencesData } from '@/data/deals'; // Keep existing mock data
import { AnimatePresence } from 'framer-motion';

type ApiDeal = {
  id: string;
  title: string;
  imageUrl?: string | null;
  merchant?: {
    businessName?: string | null;
    address?: string | null;
  } | null;
  discountPercentage?: number | null;
  discountAmount?: number | null;
  endTime?: string | null;
};

const adaptApiDealToUi = (apiDeal: ApiDeal): Deal => ({
  id: apiDeal.id,
  name: apiDeal.title,
  image:
    apiDeal.imageUrl ||
    'https://images.unsplash.com/photo-1590846406792-0adc7f938f1d?w=500&q=80',
  rating: 4.5,
  category: apiDeal.merchant?.businessName || 'Restaurant',
  price: '$$',
  location: apiDeal.merchant?.address || 'Location TBD',
  dealType: apiDeal.discountPercentage ? 'Discount' : 'Happy Hour', 
  dealValue: apiDeal.discountPercentage
    ? `${apiDeal.discountPercentage}% OFF`
    : `$${apiDeal.discountAmount ?? 0} OFF`,
  expiresAt: apiDeal.endTime ?? undefined,
  originalValue: 50, 
  discountValue: 25, 
});

export const HomePage = () => {
  const [activeTab, setActiveTab] = useState('deals');

  const {
    data: rawDeals,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['deals'],
    queryFn: () => apiGet<ApiDeal[]>('/deals'),
  });
  const normalizeDealsArray = (data: unknown): ApiDeal[] => {
    if (!data) return [];
    if (Array.isArray(data)) return data as ApiDeal[];

    if (typeof data === 'object' && data !== null) {
      const obj = data as Record<string, unknown>;
      if (Array.isArray(obj.deals)) return obj.deals as ApiDeal[];
      if (Array.isArray(obj.data)) return obj.data as ApiDeal[];
      return [data as ApiDeal];
    }

    return [];
  };

  const liveDeals = normalizeDealsArray(rawDeals?.data).map(adaptApiDealToUi);

  return (
    <div className="bg-white pt-16 sm:pt-20">
      <section className="border-b border-neutral-200 bg-white pb-6 pt-6 sm:pb-8 sm:pt-8 lg:pb-10 lg:pt-12">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <DealFinder activeTab={activeTab} onTabChange={setActiveTab} />
        </div>
      </section>

      <ContentCarousel title="Today's Top Deals" deals={premiumDeals} />

      <SectionDivider />

      {isLoading ? (
        <>
          <CarouselSkeleton title="Latest Merchant Deals" />
          <SectionDivider />
        </>
      ) : error ? (
        <div className="py-8 text-center text-red-500">
          Error fetching live deals.
        </div>
      ) : liveDeals.length > 0 ? (
        <>
          <ContentCarousel title="Latest Merchant Deals" deals={liveDeals} />
          <SectionDivider />
        </>
      ) : null}

      <AnimatePresence mode="wait">
        {activeTab === 'deals' && (
          <ContentCarousel
            key="deals-carousel"
            title="Popular Deals Near You"
            deals={premiumDeals}
          />
        )}

        {activeTab === 'experiences' && (
          <ContentCarousel
            key="experiences-carousel"
            title="Unforgettable Experiences"
            deals={experiencesData}
          />
        )}
      </AnimatePresence>

      <SectionDivider />

      <ContentCarousel title="Popular Happy Hours" deals={happyHourDeals} />

      <SectionDivider />

      <DiscoverSection />
    </div>
  );
};
</file>

</files>
